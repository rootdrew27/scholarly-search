SECTION: Executable QR codes with Machine Learning for Industrial Applications††thanks:This work has been partially funded by CNR under the project “Executable QR codes (EQR) - GORU IEIIT” (DIT.AD001.212).

Executable QR codes, also known as eQR codes or just sQRy, are a special kind of QR codes that embed programs conceived to run on mobile devices like smartphones. Since the program is directly encoded in binary form within the QR code, it can be executed even when the reading device is not provided with Internet access.
The applications of this technology are manifold, and range from smart user guides to advisory systems.
The first programming language made available for eQR is QRtree, which enables the implementation of decision trees aimed, for example, at guiding the user in operating/maintaining a complex machinery or for reaching a specific location.

In this work, an additional language is proposed, we term QRind, which was specifically devised for Industry. It permits to integrate distinct computational blocks into the QR code, e.g., machine learning models to enable predictive maintenance and algorithms to ease machinery usage.
QRind permits the Industry 4.0/5.0 paradigms to be implemented, in part, also in those cases where Internet is unavailable.

SECTION: IIntroduction

Interaction between humans and objects in today’s real world, as postulated by the Internet of Things (IoT) paradigm, is increasingly based on the use of QR codes, and the industrial context is no stranger to this trend.
Since their creation in 1994, QR codes have been commonly employed to
produce labels that
quickly provide various types of information,
e.g., to track the products’ lifecycle.
In the following three decades, QR code technology has proven to be extremely pervasive and has been successfully applied to a large number of different fields, to cite a few: localization[1], payment[2], recycling[3], security[4], teaching[5], traceability[6], etc.

Nowadays, QR codes are often used to store a uniform resource identifier (URI), or more specifically a uniform resource locator (URL) that points to a remote resource (e.g., a web server) on which either useful information is found or some web-based application is run.
Executable QR codes (eQR codes), also known as sQRy, have been introduced in 2022 with the aim to overcome one of the major limitations of conventional QR codes,
that is, their inability to support user interaction
in the absence of a working Internet connection.

In eQR codes, the application is completely embedded inside the QR code (encoded as a binary code),
making execution possible even when network access is not available.
This situation is not uncommon in real life (e.g., when the user is located inside a large building, in the mountains, in the middle of the sea), but can be encountered also in industrial scenarios.
Consider, for instance, petrochemical plants, mines, but also shop-floors and warehouses where, for whatever reason, maintenance personnel lack authorization to connect to both the corporate intranet and the Internet.

In this work a new programming language (or dialect, in the eQR code terminology) is proposed, we name QRind.
Similarly to QRtree, which is currently the sole existing dialect implemented in eQR codes, QRind permits the implementation of decision trees, which are useful for predictive/reactive maintenance and troubleshooting, but can be also employed to assist users in operating complex machinery.
QRind is a completely different dialect from its predecessor:
not only it permits the declaration of variables, but enables integration of machine learning algorithms, in such a way to improve equipment maintainability as foreseen by Industry 4.0/5.0.
At the same time, QRind retains high compactness for the generated code, which is probably the main requirement for any eQR code dialect, as QR code capacity is very limited.

In the following, SectionIIintroduces QR codes and the eQR code technology,
SectionIIIdescribes the basics of the QRind dialect,
which is further explained through an example in SectionIV,
just before the conclusive remarks of SectionV.

SECTION: IIQR codes vs. eQR codes (sQRy)

QR code is a two-dimensional barcode technology invented by Denso Wave Automotive company
three decades ago to track (i.e., identify) vehicles during manufacturing.
The standard has been updated over the years to increase capacity and recognition speed, to the point where they are now far superior to one-dimensional barcodes.
The most recent specification dates back to 2015[7]and defines several versions of QR codes (fromto), which can contain up tobytes.

A QR code typically consists of a grid of black squares on a white background, along with some graphical control structures to aid detection and alignment of the optical reader during the decoding process.
Every QR code is generated starting from the information that we want to store in it (more information requires larger physical space).
The outcome is an image that can be printed on a physical support, like paper, and made available to users
easily and inexpensively.

Data contained in a QR code can be of four types: numerical, alphabetical, kanji/kana, or binary.
Each one of these types has its own encoding, which results in different physical space requirements.
Error correction codes are additionally exploited to improve reliability, so that even partially damaged QR codes can be read.
Error correction takes some space, so a trade-off between reliability and net capacity is sought.
This can be selected via four possible levels of error correction (Low, Medium, Quartile, and High), which offer increasing resiliency to damage allowing up toof data to be recovered.

Basically,
an eQR code (sQRy) is a QR code that contains a program written in theQRscriptprogramming language[8].
The idea of including a program into a QR code was preliminarily proposed in[9]and later expanded in[10].
eQR technology permits intelligence to be embedded inside a QR code and its operation does not require Internet access.
The eQR code is a self-contained program that can be operated without any external resources, except for a virtual machine installed on the end-user’s device, which provides a dedicated software environment that executes the binary code retrieved from the QR code[11].
This is a key enabler in all those contexts where the Internet connection is absent or just unstable.

To decrease the space occupied by the encoded program,
the QRscript programming language supports a plurality ofdialects.
In fact, every dialect is very specific, which implies a narrower application field and a smaller instruction set,
which translates to a more compact encoding for instructions.
For example, the QRtree dialect[10,11]supports the representation of decision trees and only includesinstructions.

As shown in Fig.1,
the life cycle of an eQR code is split in two parts, namely, thegenerationand theexecutionchains.

The generation chain is carried out by the eQR developer (expert user), typically on a workstation or a PC.
First, the source code (a high-level programming language, even a visual one) is translated into an intermediate representation.
More than one high-level language can be translated to the same intermediate representation.
Second, the intermediate representation is converted to a binary format termedeQRbytecode.
Finally, the stream of bytes is embedded into a
conventional
QR code.
Since suitable libraries are widely available for this purpose, the last step is trivial.

The execution chain is instead performed by the end user
on her/his
device (e.g., a smartphone).
A specialized app has to first recognize and extract the
content of the
QR code, obtaining the related eQRbytecode.
Again, there are plenty of libraries aimed to this purpose.
The eQRbytecode is then converted back into the intermediate representation.
Finally, the program is executed by a virtual machine
running on the user’s device
that supports user interaction through the specific input/output features offered by the device itself (typically, a touchscreen).

SECTION: IIIQRind Dialect

This section describes the intermediate code for the QRind dialect.
As for QRtree, the definition of a high-level programming language is irrelevant from a research viewpoint.
Such languages only facilitate the user in writing an intermediate (optimized) language, but they are not representative of the properties of the language.

The QRind dialect shares with QRtree the ability to store a decision tree,
which is a fundamental model to performdiagnosisandpredictive maintenance,
e.g., to implement anassistance systemfor failure management or smart instruction manuals for industrial machinery.
Unlike QRtree, QRind supports the declaration of variables.
This increases the size of the intermediate code slightly, but greatly enhances expressiveness and, thus, the set of concrete problems this technology can tackle.
Such feature is indispensable in a language that allows the definition of ML models, because it permits to feed the ML algorithm with a set of input features to perform classification and regression.
Usually, input values for the ML model cannot be requested from the user immediately before the execution of the ML algorithm,
since they may have already been acquired elsewhere in the program or obtained as the outputs of other ML or non-ML algorithms.

Variables are stored in registers.
The number of registers that can be defined is potentially unlimited, because the computational resources of the device on which the algorithm is executed (a modern smartphone) exceed the amount of information that can actually fit into a QR code.
The index used to address a register exploits theexponential encoding, which permits to encode any integer number using a variable number of bits and is described in detail in[11].
Registers used more often are encoded on a smaller number of bits.
This permits compact representations without imposing any limitations on the number of registers.

In particular, the following types of variables were defined (which can be useful for the application context):boolean,int(andbit representations),float(andbit representations),string(ASCII-7 and UTF-8 representations),
andarrays.
For the latter type, both homogeneous arrays (which can be encoded with fewer bits) and heterogeneous arrays (which provide higher versatility from an application perspective) are available.
At the current stage of the QRind design, we plan the possibility of having other data types like dates (helpful, e.g., to manage scheduled maintenance of aging machinery) and very large numbers.

TableIreports the most common instructions of QRind.
The first five instructions are aimed at managing the decision trees, while the latter three are intended for ML capability.
In particular, excluding the first three instructions for assignment, input, and output,
the instructionsTREECONDITIONandTREEJUMPare for conditional and unconditional jumps, respectively.
The addition of instructions to deal with mathematical and boolean operations could be very useful from an application point of view.
Their description has not been reported here, however, since their implementation is simple.
Typically, it results in the execution of a sequence of operations in reverse Polish notation (in which case computation can be easily done using a stack).

More interesting and specific are the last three instructions, related to the implementation of ML algorithms.
TheMLINPUTinstruction feeds a register (array) to
the ML model and is used to transfer the related input features.
The instruction identifies with<ML_type>the type of the ML algorithm.
In the example we analyzed a
multi-layer perceptron (MLP), which is one of the most common and widely used ML algorithms.
MLP is identified by type000, while<int>represents the number of inputs to the model.

The instructionNNLAYERis instead specific to ANNs of type MLP.
They are used to construct the ANN layer-by-layer, from the input to the output.
Parameter<int>represents the number of neurons of the next layer,<type>is the type of neurons (the same for the entire layer, e.g., linear, sigmoid, tanh, ReLU, Leaky ReLU, softmax),<encoding>expresses how weights are encoded (float16 for more compact models or float32 for precise models),
and finally<weights_list>, which represents the list of weights and biases of the model.
The<weights_list>is encoded starting from the leftmost neuron of the upper layer by listing the weights that connect this neuron with the neurons of the lower layer, in left-to-right order, and then the corresponding bias.

The formula implementing the run forward process of one layer of the MLP is:

whereis the number of neurons in the lower layer,is the number of neurons in the next layer,is the weight connecting neuronin layerwith neuronin layer,is the input that is mapped to a specific register,is the bias of neuronin layer,is the activation function (linear, sigmoid, tanh, etc.),
andis the output of neuronof layer.
For example, if two adjacent layers are characterized byand, the weights and biases are encoded by QRind in the following order:.

Finally, theMLOUTPUTfunction maps the output of the ML model to a register, which can be used to alter the way the decision tree can be
subsequently
navigated by the user.

Once the intermediate language instructions are defined, a set of conversion rules must be specified for translation from intermediate language to binary code, as customarily done in compilers.
While not particularly complex (an example can be found in the QRtree specification document[11]), such rules should aim to produce a code that is as compact as possible.

SECTION: IVExample

To better understand QRind and to explain how it works, a concrete and simple example has been used.
A high-level graphical representation of the related program is depicted in Fig.2.
The very same program, described in the intermediate language, is reported in Fig.3.

The program initially asks the user the currenttemperatureandrotational speedin revolutions per minute (RPM) of a hypothetical industrial machine.
These input parameters are stored in register array elementsR1[0]andR1[1], in lines(2)and(4)of Fig.3, respectively.
RegisterR1is then fed as input of an MLP.
After its execution (run-forward operation), if the output of the MLP is less than a given threshold,
the message “Machine is running” is printed in line(9).
Such threshold is stored in registerR0and is set toby means of aSETinstruction in line(0).
Otherwise, if the output of the MLP is greater than or equal to, the instruction in line(8)performs a conditional jump to line(11) to print a warning message (“Problem! Is the oil level fine?”) and ask additional information to try solving the problem.

Based on the answer to the latter question, which is stored in registerR3by theINPUTinstruction on line(12), a decision block is used to print the final message.
In particular, the decision block that is mapped on theTREECONDITIONinstruction on line(13)prints “Add oil” in the case the oil level is low, otherwise it prints nothing.

It is worth pointing out that the intermediate language does not define anexitinstruction that stops program execution.
This instruction is essential for QRind, and must be used whenever a final branch of the decision tree is reached.
However, we decided to implicitly encode it into jump instructions.
In particular, when a jump is performed to a point after the last instruction of the program, that jump is interpreted as the end of the program execution.
In the example, this operation is performed in lines(10)and(13).

Regarding the MLP model, it is encoded in Fig.3from line(5)to line(7).
In detail, line(5)maps theR1register to the two inputs of the ML model, which is defined as an MLP.
TheNNLAYERinstruction defines an MLP layer of dimension(i.e., two weights plus a bias, encoded as float32) that makes use of thesigmoidactivation function.
Starting from weights, the output of the neural network is obtained through (1) by means of the following computation:

whereis the sigmoid function.
For instance, when the inputs areand, the output is, which is classified as an operational problem.
Finally, the output of the ML model is mapped to registerR2by theMLOUTPUTcommand on line(7).

Of course, in a real industrial-grade implementation of the whole toolchain, following the execution chain
(on the right side of Fig.1), the reconstructed intermediate code of QRind
(which will appear similar to the one reported in Fig.3) will be executed on a virtual machine, and possibly mapped onto a graphical interface as done for QRtree.
To provide some hints on the practical capabilities of QRind, a single QR code can embed an MLP withinputs, one hidden layer withneurons, and one output, plus some additional input/output instructions.
In this case, ANN coefficients takeandbytes, when encoded as float16 and float32, respectively.

SECTION: VConclusions

A new eQR code dialect named QRind was defined and presented, which
supports the implementation of decision trees and also integrates machine learning algorithms.
This permits it to be applied to a variety of industrial automation contexts.

A simple example is also provided, which includes all the main instructions made available by QRind and shows how they can be employed.
This is a reasonable starting point for enabling the full implementation of the dialect.
As future work, we will define precisely how to optimally map every instruction to the corresponding binary representation,
i.e., occupying as little space as possible.
This process is relatively straightforward for anybody who is knowledgeable about formal languages and translators, and can be performed using the same steps followed for the QRtree dialect.

SECTION: References