SECTION: Online Optimisation of Machine Learning Collision Models to Accelerate Direct Molecular Simulation of Rarefied Gas Flows

We develop an online optimisation algorithm for in situ calibration of collision models in simulations of rarefied gas flows. The online optimised collision models are able to achieve similar accuracy to Direct Molecular Simulation (DMS) at significantly reduced computational cost for 1D normal shocks in argon across a wide range of temperatures and Mach numbers. DMS is a method of simulating rarefied gases which numerically integrates the trajectories of colliding molecules. It often achieves similar fidelity to Molecular Dynamics (MD) simulations, which fully resolve the trajectories of all particles at all times. However, DMS is substantially more computationally expensive than the popular Direct Simulation Monte Carlo (DSMC) method, which uses simple phenomenological models of the collisions. We aim to accelerate DMS by replacing the computationally costly Classical Trajectory Calculations (CTC) with a neural network collision model. A key feature of our approach is that the machine learning (ML) collision model is optimised online during the simulation on a small dataset of CTC trajectories generated in situ during simulations. The online Machine Learning DMS (ML-DMS) is able to reproduce the accuracy of MD and CTC-DMS for 1D normal shocks in argon at a significantly lower computational cost (by a factor of–), at a wide range of physical conditions (Mach numbers, densitiesto, and temperatures\qty16 to\qty300). We also derive an online optimisation method for calibration of DSMC collision models given a model of the interatomic forces. In our numerical evaluations for 1D normal shocks, the online optimisation method matches or significantly improves the accuracy of VHS (Variable Hard Sphere) DSMC with respect to CTC-DMS (with alower computational cost).

SECTION: 1Introduction

Many engineering applications, such as high altitude aerodynamics and micro-channel flows, involve non-continuum conditions where the Navier–Stokes equations of fluid dynamics are not valid, and a kinetic description is required. The Direct Simulation Monte Carlo (DSMC) method is a popular and accurate method for the numerical simulation of gas flows in these rarefied conditions[1,2]. However, simulations usually rely on phenomenological models for intermolecular collisions, as well as for modelling processes such as the transfer of rotational and vibrational energy. By contrast, Molecular Dynamics (MD) simulations attempt to fully resolve the positions and velocities of all the atoms in the system, requiring only a model for the interatomic forces or potential energy surfaces (PES), in order to integrate the atomic trajectories. MD simulations of rarefied flows are now possible for many low-dimensional configurations such as the 1D shock using parallel computing resources and algorithms such as the Event-Driven/Time-Driven MD approach[3]. However, these approaches remain infeasible for complex, three-dimensional flows. DSMC models such as the widely used Variable Hard Sphere (VHS) model can be used to successfully reproduce the results of MD simulations, but in order to do so the model parameters must be manually adjusted with direct reference to the resulting shock profiles[4].

Direct Molecular Simulation (DMS) has been proposed in order to incorporate fully-resolved integration of molecular collisions into the DSMC framework[5,6,7], and a parallelised, GPU-accelerated implementation is presented in[8]. DMS relies only on a PES or interatomic potential, and in particular the method is much less sensitive than DSMC to the physical conditions of the simulation. In DMS, pairs of simulation particles, each representing a large number of physical molecules, are chosen to undergo collisions according to an acceptance-rejection algorithm, as is usual in DSMC, but the outcomes of collisions are resolved by direct integration of molecular trajectories, referred to as Classical Trajectory Calculation (CTC). This method saves a large part of the computational cost associated with MD, by requiring that the molecular trajectories be integrated only for those particles selected to collide, and is able to reproduce MD results accurately for 1D normal shocks[4,8]. DMS has also been used to simulate hypersonic flows around a cylinder[9]and double cone[10]. However, it is still significantly more computationally expensive than standard DSMC, where the outcome of a given collision is typically determined by a simple phenomenological model such as VHS. The objective of this paper is to reduce the computational cost of DMS by replacing the trajectory calculations with a collision model which is less costly to evaluate, while retaining the accuracy of the method. As an initial step towards the goal of efficient data driven DMS for rarefied flows in complex real world applications, this work introduces an online approach to training of collision models for DMS and DSMC, applied to the 1D normal shock problem in argon. We use an artificial Neural Network to model the collisions, but emphasise that the methodology does not depend on the particular model parametrisation used. (For example, our method is also applicable to widely-used DSMC collision models such as VHS.) The model parameters are obtained by training against CTC data, and the results benchmarked against a range of standard approaches.

Machine learning is now widespread in the modelling of fluid flows[11], with applications including methods for the solution of the governing PDEs with neural networks[12,13], data driven discovery of underlying physics[14], and optimisation over closure models[15,16].
Applications of machine learning to rarefied gas flows are not well developed as compared to continuum flows. Neural networks have been applied to reconstruct ab initio potential energy surfaces for–collisions for use in DMS[17], with improved computational efficiency compared to standard polynomial models. Machine learning has also been used to learn forces for use in MD simulations ofmolecules[18]. In both of these previous works machine learning is used to model the interactions between particles, but collisions must still be resolved with trajectory calculations. By contrast, we propose a method to entirely replace the trajectory calculations with a model trained to reproduce the dynamics for a given interatomic potential.

In[19], the authors used a polynomial approximation to the scattering angle of the Lennard–Jones (LJ) potential and applied the resulting model in DMS calculations. While in principle simpler than using a neural network model (with around 150 parameters), the construction of the approximation involved manual choices of regions for a piecewise polynomial model. The polynomial approximations are also obtained only for relative velocities less than a fixed maximum value, although this quantity is unbounded during the DMS procedure. The polynomial approximation approach is therefore not easily generalisable to other potentials. While the polynomial approximation was able to reproduce the value of the viscosity for a Lennard–Jones potential in subsonic Couette flow, the restrictions on the input values mean it may break down entirely in high temperature or high Mach number flows where large values of the collision energy are more likely, such as the shock. Parametrising our model with a neural network, trained online to ensure that training data is relevant to the given physical conditions, means the present approach is agnostic to the particular potential model used in DMS and has the potential for generalisation to collisions with rotational and vibrational degrees of freedom. The online training method also ensures the model encounters the correct range and distribution of the inputs for the physical conditions, with no manual parameter tuning required.

We first train neural networks to replace the trajectory integration procedure in DMS. Models receive as inputs the kinetic energy and impact parameter of a collision, and produce the resulting scattering angle. The use of such a collision model to replace CTC in the DMS procedure is referred to as ML-DMS. While neural networks trained offline on a given data set are shown to match very well to CTC-DMS and MD data for “in-sample” physical conditions, we also observe that they can fail to generalise well out-of-sample.

The standard approach in scientific machine learning is to train models based on experimental/numerical data for a a certain range of physical parameters, and hope for the resulting model to accurately generalize to out-of-sample physical regimes (on which the model was not trained). The size of the training dataset is often limited as compared to traditional uses of machine learning such as image recognition, due to the computational cost of generating high fidelity data and the cost of running experiments. Such “offline” training can suffer from overfitting to the training data and may fail to accurately generalize to out-of-sample physical regimes (or geometries) not included in the training dataset. Indeed, in this paper, we observe such overfitting for ML collision models trained offline for a fixed dataset (e.g. Mach 5) and then simulated out-of-sample on a new physical condition (e.g. Mach 10). To address this challenge for scientific ML models, we develop an online optimisation method which calibrates collision models to data generated in situ during the actual predictive simulation, thereby providing data relevant to the exact physical conditions at which the prediction is made. Training data is generated periodically during the simulation by evaluating a small fraction of collisions with CTC. The model parameters are continually updated using a stochastic gradient descent algorithm and are used to evaluate the remainder of the collisions. Our results, given in Section4.2, demonstrate that online-optimised ML collision models outperform offline-trained ML collision models and are able to closely reproduce results obtained with full CTC-DMS.

We develop and compare two approaches to the training of collision models during DMS. Firstly, models are trained on a subset of collisions during a relatively short initial period. The resulting model is used to evaluate the bulk of collisions during training and for the remainder of the simulation. This method is suitable if the inputs seen during training are representative of those during the rest of the simulation. In the case of the 1D shock, this is the case since the range of temperatures and densities seen in the shock is fixed by the Rankine–Hugoniot conditions. However, in more complicated scenarios this assumption may be unjustified if details of the steady state are not known ahead of time. In the second approach therefore, training steps are carried out periodically throughout the transient phase of the simulation, before averaging of the macroscopic variables begins. The model is thus trained on inputs which are guaranteed to be more representative of the final state than those encountered at initialisation. As the collision model becomes more accurate during simulation, the distribution of collisions used as training data will better reflect the true distribution, leading to further improvements in the training. Online ML-DMS reproduces CTC-DMS and MD results very closely with a significantly reduced computational cost, across a very wide range of Mach numbers (), densities (to, and upstream temperatures (\qty16 to\qty300). Figure1shows a subset of the full results set out in Section4.2. The online training produces a very small overhead () compared to use of a pre-trained neural network model, and is around an order of magnitude faster than full CTC-DMS.

Finally, we apply the online training procedure to DMSC for the calibration of parameters in the widely used VHS collision model, using the outcome of collisions obtained from CTC with the LJ potential. We derive a method for optimising the expected collision angle for a given DSMC step against trajectory data. The optimisation procedure is able to reproduce the VHS parameters found by manual comparison to CTC-DMS shock profiles, while requiring only–times more computational time than a single DSMC simulation, andtimes less time than full CTC-DMS. Figure2shows example shock profiles obtained from CTC-DMS, online VHS and offline VHS DSMC using reference values from the literature, with full results for a wide range of Mach numbers in Section5.2.2. We note that the online model training reproduces the reference values where they are accurate at low Mach numbers, and gives significantly improved accuracy relative to DMS at high Mach numbers.

A method of optimisation over DSMC using an adjoint gradient estimator has recently been developed in[20,21]. This method could be used for offline optimisation of the VHS parameter through direct comparison with the final shock profile. However, in this case each gradient descent step would require one forward and one adjoint DSMC simulation to be carried out. Our approach, which directly calibrates the VHS parameter to CTC data, is significantly less computationally expensive.

We note that for a given PES the VHS model parameters can be fit to reproduce exactly the temperature exponent of the viscosity cross section at a given relative velocity, or Chapman–Enskog viscosity at a given temperature[2]. However, the reference temperature and viscosity data used for calibration must be chosen carefully, especially if a wide range of temperatures will be encountered[2]. Our approach therefore provides a principled and computationally efficient method of calibrating DSMC parameters based on microscopic dynamics, complementing the existing methods of calibration to viscosity data or visual comparison to experimental results. The method is generalisable to the case of simultaneous calibration of multiple parameters. It is also applicable to models for inelastic collisions, such as the rate of elastic relaxation in the widely used Larsen–Borgnakke model and the collision kernel proposed in[22,23].

In Section2we review the DSMC and DMS methods. The numerical scheme used for CTC is also described. In Section2.3we describe the 1D shock simulations which will be used to numerically evaluate
our methods and models. Our CTC-DMS implementation is also verified against MD results in the literature in Section2.4. We propose to replace the CTC trajectory simulation with a neural network collision model. Section3develops online optimisation methods for training ML collision models using CTC data generated in situ during simulations. Section4presents a detailed comparison of numerical results for our method against the literature as well as benchmark DSMC and CTC-DMS models at a wide range of physical conditions. Finally, in Section5, we apply a similar online training methodology to optimise over the parameter of the VHS model. This method produces shock profiles which match more closely to those obtained from CTC-DMS than DSMC with standard parameter values, with a computational cost much lower than DMS.

SECTION: 2DSMC and Direct Molecular Simulation

The DSMC and DMS methods are stochastic particle methods, which approximate the distribution of real molecules with simulation particles, each representing a large number of physical molecules. In the case of a monatomic gas such as argon with no internal degrees of freedom, the state of each simulation particle is specified by its velocityand position. The spatial domain is divided into cells, within which simulation particles are chosen to collide randomly in a manner which represents the interactions of physical particles. For details on the justification of the stochastic approach, see[2,1]. In both DSMC and DMS, the evolution of the simulation particles occurs in discrete timesteps of length. Each timestep consists ofcollision steps and a convection step. DMS and DSMC differ in the cross section used to select which particles collide and how these collisions are evaluated (i.e., the post-collision velocities).

For both methods, in a collision step, pairs of particles in the same cell are selected to collide. This portion of the algorithm follows the standard null-collision method as described in[2]. In each spatial cell, with volume,pairs of computational particles are selected uniformly at random to be considered for a collision. The rate of collisions for particles with relative velocitydepends on the cross section, which is chosen differently between DSMC and DMS. Let the velocities of theparticles in a cell be, and defineas an upper bound on the relative velocity over all pairs of particles, and. Thenis given by

Thepairs are referred to as being chosen for a virtual collision. Each virtual collision pair, is then selected to undergo a real collision with probability

This is carried out via acceptance-rejection. If a pair is accepted to undergo a real collision, its post-collisional relative velocity must be calculated. Given a new value of the relative velocitybetween the two particles, the conservation of momentum through the collision gives the post-collision velocities of the particles as

After the collision steps are carried out and the particle velocities updated, the particle positions are updated according to

The steps described above are common between DSMC and DMS. The methods differ in the choice of cross sectionand the method of calculating the post-collision relative velocity.

SECTION: 2.1VHS DSMC

The VHS model is commonly used for collisions in DSMC simulations[1]. It is a phenomenological model which is not intended to accurately describe the microscopic collision dynamics. The model is instead designed to be simple, while incorporating the experimentally observed fact that the cross section for collisions decreases with the relative velocity.

The VHS cross section is given by the hard sphere expression, with a diametervarying as a function of the relative velocity:

The cross section therefore decreases with the relative velocity, with the dependence given by the parameter. Takingcorresponds to a hard sphere gas with a fixed diameter, andgives the Maxwell molecule model. Defining, the reference velocity is given in terms of a reference temperatureby

withbeing the reduced mass of a colliding pair.
If a pair of particles is accepted for a real collision, the scattering is then assumed to be isotropic, with the direction of the post collision relative velocity chosen uniformly on the unit sphere. Explicitly, this is

withand, for,drawn independently, uniformly from.

SECTION: 2.2DMS

DMS differs from DSMC in that the dynamics of each collision are intended to represent the microscopic dynamics with a given interaction potential. For CTC-DMS this is carried out by integrating the classical equations of motion.

A collision between two argon atoms is uniquely specified by the collision energy, which is a function of the relative velocity, and the impact factor, which can be understood as the perpendicular distance between the initial particle trajectories in the centre of mass frame. Since in a stochastic method such as DMS the positions assigned to simulation particles do not correspond to those of underlying physical particles, the impact parameter must be chosen at random.

For argon, without any internal degrees of freedom, the collision amounts to obtaining a collision anglethrough which the relative velocity is rotated. Details of the CTC procedure for doing so are provided in Section2.2.1.

In argon the collision dynamics are completely specified by a single function of two variables. Therefore, if this function could be exhaustively tabulated, the DMS procedure could be implemented with a lookup table similar to those used to model chemical processes in reacting or combusting flows[24]. We do not explore this approach here, since it would not be feasible to generalise to molecules with internal degrees of freedom. For example, in diatomic molecules, even neglecting vibrational modes, there are seven inputs for each trajectory calculation, making the resulting table impractically large. For example to use 50 values of each input would requiretable entries, and several terabytes of memory. Therefore, it is necessary in practice to calculate the trajectory outcomes during the simulation, or to use a coarse-grained “state-to-state” method which involves additional modelling assumptions and may introduce inaccuracies[9,25,26].

Oncehas been calculated, the post collision relative velocityis obtained from the pre-collision valueas follows[1, Equation 2.22]:

whereis an angle which may be chosen uniformly at random due to the rotational symmetry of the collision around the axis of the relative velocity.

Therefore, for complete specification of the algorithm it is necessary to choose a model for the cross section appearing in Equation2, a method of selecting the impact parameterfor each collision, and finally a function.

The collision cross section governs the rate at which pairs of molecules at a given relative velocity are selected to undergo a collision. Since in CTC-DMS the collision outcomes are determined by the details of the trajectory calculation, the cross section is chosen to be conservatively large. The cross section used in this paper is determined by the maximum impact parameter resulting in an appreciable collision,

where the power law parametrisation of the maximum impact parameter, with,as used in[8], was found to minimise the number of collisions resulting in a very small change in relative velocity.
As in[8]the impact parameter for each collision is then chosen to be consistent with the cross section, as, whereis a standard uniform random variable.

The CTC-DMS procedure used as a benchmark in this paper is completely specified for reference in Algorithm1. Details of the CTC calculations to specify the functionare given in Section2.2.1. In general, we refer to DMS using an ML trajectory modelas ML-DMS (see Section3.1), whereare parameters which must be trained/calibrated. We emphasise that the choice of a neural network model for the collisions is only made as a flexible nonlinear parametric model which is easy to train. A large class of alternative collision models – including widely-used DSMC collision models such as VHS – could be used within the framework of this paper and their parameters can be trained/calibrated with our online optimisation method.

The CTC-DMS method calculatesthrough numerical integration of a trajectory with a given potential. Trajectory calculations are carried out to solve Newton’s equations of motion,

forand a given interatomic potential. We use the velocity Verlet integrator[27], with update at each time step given by

The opposite sign inis chosen for each particle to conserve momentum. The forces are those estimated at the start and end of the timestep

The timestep was taken as, which was observed to be sufficient to conserve energy during the collision. Each collision often involves several thousand Verlet timesteps, whereas for DSMC collisions require only a small number of operations. For this reason, CTC-DMS simulations require several orders of magnitude more computational time than DSMC. Simulations were initialised and impact parameters chosen according to the procedure below, following[8].

One particle was initially placed at the origin, with the other particle at-position, displaced by a distancefrom the-axis at an anglechosen uniformly at random.

The particles were given a relative velocity aligned along the-axis of, withthe reduced mass of the collision pair.

The simulation was terminated when the particles again reached a distance ofapart, or when the trajectory time reached the DSMC timestep size. The collision angle was then calculated as the angle between the-axis and the final velocity of the particle initially placed at the origin.

In our DMS simulations, trajectory calculations use the Lennard–Jones potential

with the same parameter values as were used in[8,28](see Table1).

SECTION: 2.3Experimental Setup: Physical Conditions and Numerical Simulation Details

The DSMC and DMS methods were implemented for the 1D normal shock in argon. The physical conditions are specified by the upstream density, upstream temperatureand Mach number, with downstream boundary conditions given by the Rankine–Hugoniot conditions. The number of simulation particles is kept constant in time. In order to enforce the boundary conditions, any particles leaving the domain are regenerated from a one-sided Maxwellian with moments corresponding to the shock conditions.

Unless otherwise stated, for all simulation results presented in this paper,spatial cells are used over a physical domain of length, whereis the upstream mean free path, withsimulation particles. The time step size isfor simulations at, and otherwise scaled in inverse proportion to the density as. Simulations are initialised with a jump between upstream and downstream equilibrium distributions determined by the Rankine–Hugoniot conditions, and run for 1,000 timesteps before averaging of the macroscopic variables is carried out for a further 500 timesteps to produce the final results. In order to reduce statistical scatter in the profiles, simulations at the lowest Mach number of 1.55, and those at cold temperatures () are instead carried out withparticles, and averaging of the macroscopic variables begins after 2,000 timesteps, proceeding for a further 1,000 steps.
This simulation length is chosen conservatively in order to produce smooth and stable shock profiles, and to allow consistent comparison between simulations with different methods. It may be possible to obtain smooth shock profiles with a shorter simulation time, however we note that for a Mach 5 shock at,, a transient stage of 500 timesteps followed by 250 averaging steps is found to be insufficient for a smooth profile in the region just downstream of the shock.

SECTION: 2.4DMS Verification

To verify the implementation, CTC-DMS results are compared to MD from[4], at free stream densities ofand. Temperature and density profiles for these conditions are provided in Section4.2(Figures7and8) in the context of the performance evaluation of the proposed ML-DMS models. The density and temperature profiles of the present CTC-DMS calculations match very closely with MD results.

CTC-DMS results are compared directly with experimental data in Figure9. For higher Mach numbers, most obviously Mach 9, the DMS does not match exactly to the available experimental data. We instead observe slight discrepancies versus experimental density profiles, namely a thinner shock at high Mach numbers, however this is likely to be a result of the particular intermolecular potential used. Similar discrepancies between CTC-DMS with the Lennard–Jones potential and experimental profiles were reported in[29]when comparing to the experimental measurements of Holtz and Muntz[30]. For additional validation of the present implementation, Figure3shows a comparison at these experimental conditions, corresponding closely to the profiles reported in[29]. In summary, our CTC-DMS simulations have excellent agreement with MD simulations from the literature (for the same Lennard–Jones potential) and good (although not exact) agreement with experimental data (likely due to the Lennard–Jones potential being an approximation and also, perhaps, noisy data from experiments).

Simulations were also carried out with more particles and timesteps, in order to confirm the convergence of the method, with no change in the results.

SECTION: 3Neural Network Collision Models

SECTION: 3.1DMS with Neural Network

Before presenting the online optimisation method for collision models – which is one of the main contributions of this paper – we first describe the architecture of the neural network collision modeland the method of offline training which serves as a benchmark. The inputs for all neural network models in this paper are taken to be the non-dimensional collision energyand impact parameter. We generated a dataset of Ar–Ar collisions with,, to be used in offline training. These ranges of the input values were chosen to include the vast majority of collisions observed in a Mach 5 shock at.

The offline benchmark model consists of a neural network with three fully connected layers, each with 50 units and ReLU activation functions. The neural network architecture used for offline-trained models is a function of,, and learned parameters.can be very large, commonly up to several hundred, and is unbounded due to the stochastic nature of the simulation. The low energy regime,, contains a region of high sensitivity to the impact parameter, shown in Figure4(a), while the dependence in the high energy regime (Figure4(b)) is much simpler. Therefore, separate sets of neural network parameters are trained for each regime. The collision angleused in offline ML-DMS was taken to be a piecewise function of, with distinct sets of learned parametersin the two regimes:

The inputs and outputs of the network were normalised to lie within the intervalto facilitate training. The training was carried out with the RMSProp algorithm, taking 4,500 and 150 epochs for the low and high energy datasets respectively, with a mini-batch size of 5 and a learning rate of. The neural network outputs are compared with the underlying data in Figures4(c–d), showing that the model output closely agrees with the output of trajectory calculations.

Shock profiles obtained from ML-DMS with the offline neural network collision model are shown in Figures7() and8(). Since the training data were selected for a Mach 5 shock at, as expected the profiles match closely to CTC-DMS results in this case and for the cold shock at Mach 7.183,. However, the temperature profile deviates significantly from the CTC-DMS at Mach 9, where the temperature of the gas and energy of the collisions are higher. The inability of the model to generalise well outside of the restricted training data set motivates the development of the online training method in the next section.

SECTION: 3.2Online Training

While the neural network model trained offline shows good accuracy on shocks up to Mach 7, at a range of densities and temperatures, the results deviate significantly from the MD results in the temperature profile at Mach 9 (see Figure7). Since at higher Mach numbers, collisions at high energy become more frequent, this suggests that the neural network is encountering data outside of the training range and failing to extrapolate correctly (i.e. generalisation error). It would be possible to solve this problem by training a new model for higher energy collisions, but each new model would also encounter problems at ever higher Mach numbers. Another drawback of the offline model used in the previous section is the use of a separately trained network parameters for inputs in two distinct regions.

Therefore we instead develop a new online algorithm to train a single neural network modelonlinefor each simulation, on CTC training data generated in situ during the simulation. In contrast to the offline model above, the online trained network uses a single set of parameters for all inputs. The online training ensures that the training data is representative of the physical conditions encountered during the current predictive simulation, in contrast to the standard approach to scientific machine learning which relies on a dataset which must be curated in advance. Trained models may also be re-used in situations where the collision parameters are expected to fall inside the learned region, such as shocks at similar Mach numbers and temperatures, even when the geometry or other aspects of the flow are different.

Since the amount of training data required is very small compared to the total number of simulated collisions during DMS, with the model being trained on less thanof the number of collisions evaluated during the simulation, this method still results in significant computational speed up versus a full CTC-DMS simulation. In particular, our results demonstrate that, given a small set of CTC trajectories generated during the simulation, the trained model is able to successfully generalise to the remaining collisions, leading to accurate overall simulation predictions.

Our online algorithm is also able to better replicate the flexibility of DMS with respect to changes in the physical parameters. One of the advantages of DMS is that the effects of changes in the PES or interatomic potential may be investigated easily by adjusting the potential model’s parameters, without changes in the simulation code. Although in the offline ML-DMS method, this would require re-training a new model on a new dataset, the online method handles the required retraining automatically, while still requiring a fraction of the computational resources of DMS.

We present and compare two approaches for online model training. In the first method, the model is trained on a subset of collisions during a relatively short initial period, taken to be the firsttimesteps. The training period was chosen to allow some time for the distributions upstream and downstream of the shock to mix, and yields good results in practice. This method is expected to be suitable in the case that the distribution of inputs observed during this period is representative of those during the rest of the simulation. This is the case for the 1D shock since the initial conditions reflect the range of temperatures and velocities expected in the final steady state. However, in more complicated scenarios this assumption may be unjustified if details of the statistical steady state are not known ahead of time. In this case, it is desirable to continue model training throughout the simulation to ensure inputs are sampled from the full range required. In the second approach therefore, training steps are carried out periodically throughout the transient phase of the simulation. The model then sees a range of inputs which are guaranteed to be more representative of the final statistical distribution than those encountered at initialisation.

In both online training algorithms, up toof the collisions at each training step are simulated using CTC, and the neural network trained for 100 epochs on this data. An epoch consists of one pass over the training dataset, each with up to 216 minibatch updates. At each step those collisions used for training are updated using the CTC procedure. During steps where training does not take place, all collisions are evaluated using the neural network.

The online optimisation samples a random subset of particles, generates the CTC trajectory data, and then (in parallel to the ML-DMS) updates the collision model parameters via stochastic gradient descent steps. During each training epoch the collisions in the dataset are shuffled randomly and partitioned into minibatches of size m. One gradient descent step is taken for each minibatch. Given the CTC procedure as, and current neural network parameters, the loss function is evaluated at the-th gradient descent step as

The neural network parameters are then updated according to

whereis the gradient of the loss function over the minibatch, evaluated using automatic differentiation. The RMSProp algorithm is used to select an adaptive learning ratefor each minibatch, with the base learning rate for each epoch additionally scheduled to decay according to

whereis the total number of training epochs so far. Values of,were found to give good results. The initial learning rate was set to, and a minibatch size ofwas found to make the training process reliable (see Section4.1for details of the hyperparameter selection).

In summary, at a single step during the online training, the parametersand particle data,are updated according to:

Collision pairs chosen according to DSMC algorithm.

If training occurs, for each epoch, for each minibatch:

Loss functionevaluated using CTC procedure and NN model with parameters.

Gradientevaluated using automatic differentiation.

using Neural Network model output and Equation13.

The general online training procedure for DMS is described in detail in Algorithm2. Within this algorithm the two online methods outlined here vary as follows:

Method 1: Training is carried out for 100 epochs on each of the first 20 timesteps. In Algorithm2this corresponds to.

Method 2: Training is carried out for 50 epochs every 20th DSMC timestep, before averaging begins. In Algorithm2this corresponds to

In a typical simulation the transient period lasts for 1,000 timesteps, so in this case both methods give the model roughly the same length of training in total.

SECTION: 4Numerical Results

SECTION: 4.1Hyperparameter Selection

Hyperparameters for the online training were selected in order to give robust and accurate results on a subset of the testing cases which appeared most sensitive to the details of the training. Figures5shows the loss functions and learning rates during online training (using the first method of training during an initial period of 20 timesteps) for the cases displayed in the main text. For all cases, the loss declines sharply over the first hundred or so epochs of training, and for most, reaches a plateau well before the end of the training period. However, the full training time seems to be more necessary at cold temperatures and low Mach numbers. This behaviour is expected since these cases will have a higher proportion of collisions occurring at low energies, where the collision angle is more sensitive to the inputs. Training time could be reduced by adapting the length of the training period to the simulation parameters. However, in our experiments we have consistently chosen to train for 20 steps in order to give a single robust choice of hyperparameters. Hyperparameters were selected based on training performance at Mach numbers up to Mach 9. Simulations at Mach 10-50 can therefore be viewed as out-of-sample since the training procedure was not tuned for these cases.

Figure6shows the effect of changes in the initial learning rate and the number of training epochs per step, motivating the choice of training hyperparameters used in the simulations. The plots were generated at a Mach number of 7.183 in the rarefied density case, since it was this simulation which seemed to show the most sensitivity to the training parameters. From this plot an initial learning rate ofand 100 epochs per time step were selected to give a good balance between reduction in the loss, and time spent during training.

SECTION: 4.2Shock Profiles

The models proposed above have been evaluated at a wide range of physical conditions, including for a number of cases where MD and experimental reference data is available from the literature.
Figure7shows density and temperature profiles for shocks at upstream Mach numbers, withand, corresponding to a moderate density shock at room temperature, as well as a much colder example at Mach 7.183 and. Figure8shows the same Mach numbers and temperatures at significantly more rarefied conditions (). All three ML-DMS methods are compared against CTC-DMS obtained with our code, as well as MD results taken from[31], which gives details of MD simulations run at these conditions.

All shock profiles are additionally compared to DSMC results obtained using the VHS model, with parametersand,. These values of these parameters were observed to give the best fit to Alsmeyer’s experimental data in[2]. We observe that these VHS parameters fit the density profiles of MD and CTC-DMS, but are less accurate for the temperature profile at higher Mach numbers (see Figure11for upstream Mach numbers 15–50). Other choices ofand the reference values could be chosen by hand for different physical conditions to give closer agreement with the DMS and MD profiles, as in[4]. However, a priori this requires DMS/MD data, which can be computationally expensive to simulate and will likely be unavailable for complex geometries. Our aim is to give a comparison to a DSMC model which could be chosen a priori from the literature without any calibration to datasets which may not be available.

The profiles obtained from the offline neural network show close agreement between full trajectory calculation and the neural network models at Mach 5, although there are some discrepancies in the temperature profiles at Mach 9, motivating the introduction of the online training procedure. In contrast to the offline case, density and temperature profiles from both online models are in close agreement with both CTC-DMS and MD results at all Mach numbers tested. This shows the advantage of the online method in reducing overfitting and generalising to new prediction cases.

The results of training using the online algorithm have been further compared to experimental data from Alsmeyer[32]. Figure9shows comparisons between experimental shock profiles and those obtained from the online Neural Network approach, at freestream pressure ofand temperatureand Mach numbers 2.05, 3.8, 6.5, 9. At Mach 6.5 and, especially, Mach 9, the DMS results begin to deviate from the experimental profiles. Since the DMS has been shown to be capable of reproducing MD results using the LJ potential where this is available, and a similar discrepancy was observed in[29]as discussed in Section2.4, we expect that this is due to the particular model used for interatomic interactions. In all cases the online trained models are in very close agreement with the results of CTC-DMS, showing that the trained ML-DMS model is capable of reproducing the results of CTC.

While the online nature of the training means that application to any new situation can be seen as “out-of-sample”, we wish to evaluate the performance of the online ML-DMS on physical conditions for which the hyperparameters were not tuned. The training hyperparameters and model architectures used in the online algorithms above were selected based on performance on the given physical conditions (,) and Mach numbers (). To ensure that these hyperparameters are sufficiently general, and have not been overfit to the scenarios used for testing, the performance of both online ML-DMS algorithms has further been evaluated on test cases at higher Mach numberstoand at an intermediate temperature, at freestream density. The procedure is observed to perform well both during training and in the final shock profile. Shock profiles for this case are compared with CTC-DMS in Figure10, for high Mach numbers at, and in Figure11at. Excellent agreement is observed between CTC-DMS and both online training methods. Additionally, at these high Mach numbers, the discrepancy between VHS DSMC and DMS becomes more significant. The online ML-DMS simulation closely matches the CTC-DMS solutions while VHS DSMC is less accurate.

SECTION: 4.3Computational Efficiency

A comparison of the computational cost of a single timestep across the methods considered in this work can be found in Table2, showing a reduction in computational time between CTC-DMS and ML-DMS ofon a GPU. CPU simulations used an Intel 8360Y CPU. GPU simulations were carried out on a single Nvidia A100. Cross device portability of the code was achieved using the PyTorch library. The classical trajectory calculation subroutine was accelerated using PyTorch’s Just-In-Time (JIT) compilation to TorchScript, but there was no additional code optimisation. Therefore, significant increases in computational speed are likely possible for all methods considered, on both CPU and GPU.

For example, the online training could be terminated once the loss function reaches a pre-determined level, saving computational time otherwise spent on unnecessary training. Training could alternatively be carried out in parallel on a second processor, with the most up-to-date model used at each timestep of the simulation. This parallel implementation is similar to the second online method proposed above, and should limit the time required for the simulation to that of evaluating the network. In order to simplify the implementation and facilitate comparison of the methods we do not investigate these potential optimisations here. It is also likely that a custom, optimised GPU implementation of both the trajectory calculations (such as that set out in[8]) and the underlying DSMC procedure would give significant improvements in computational efficiency.

With the present implementation, DMS simulations of 1500 timesteps, withparticles, took around 14 hours to complete on the GPU. In contrast, the online neural network simulations took under an hour on the same machine. The online simulations required only around 5% more total computational time than the offline method, for a significant improvement in accuracy.

SECTION: 5Online Optimisation of the VHS Model

Previous work on MD simulations of normal shock waves has found that VHS DSMC is able to reproduce experimental and MD results at a range of physical conditions, provided that the VHS parameters are properly chosen, with appropriate values offor a normal shock atandatreported in[4]. Whereas the appropriate parameters must either be chosen by hand as in[4], or calibrated to viscosity data, we aim to develop an online optimisation method to calibrate DSMC parameters to DMS CTC data generated in situ during the DSMC prediction. The accuracy of our online DSMC optimisation method is evaluated for the VHS model in a 1D shock.

The goal of the online optimisation method is to select DSMC parameters from DMS CTC trajectory data such that the DSMC simulation will match the shock profiles obtained from DMS for a given interatomic potential. An objective function for the online optimisation must be constructed. Direct comparison of the DMS CTC collision model and DSMC collision model is typically not possible due to the different cross sections used in the acceptance-rejection steps of DMS and DSMC. We therefore minimise the conditional expectation of the discrepancy between collision outcomes for VHS and CTC given the velocities and positions of the particles.

SECTION: 5.1DSMC Online Optimisation

We wish to find VHS parameters to minimise the magnitude of the expected difference in the outcome for a single particle between collision models, written as

Hererepresents the collision angle for particleby method, which is a random variable depending on
the choice of virtual collision partners, the acceptance-rejection step which determines whether a real or virtual collision takes place, and the choice of CTC impact parameter. Expectationsare taken conditional on the positions and velocities of all particles at the current time step.

In order to use stochastic gradient descent to find an optimal parameter, we evaluate the gradient of this loss with respect toas

We have

since, by symmetry, the expectation of the collision angle given that a real collision takes place is. Let. Takingas an upper bound for the cross sectionover the cell, from the Nanbu–Babovsky DSMC algorithm[1]

and

In Equation31, the first term is the probability that particleis selected as one of theparticles for virtual collision. The second term is the probability forto be selected given thathas been. The final term is the probability ofto be selected as the collision partner for. Therefore

As required, this quantity is dimensionless and physically represents the expected number of collisions for a single physical particle in one time step, multiplied by. We do not wish to calculate this sum as it would be costly to computecross sections, one for each pair of particles in the simulation. We can instead view the sum as an expectation over uniformly sampled pairs. Therefore we have an un-biased, one-sample, Monte Carlo estimator for the expectation

where particleis sampled uniformly at random from thepotential collision pairs. We now directly evaluate the gradient of the expectation

and similarly obtain an un-biased estimate for the gradient as

where particleis chosen uniformly, and the derivative can be evaluated with automatic differentiation.

Using these expressions, we obtain an estimator for the term

We again obtain an unbiased estimate by picking two collision partnersuniformly, with the possibility that

An unbiased estimate of the expectation of the DMS collision angle is given by the same procedure, sampling a third collision partner independently, as well as an impact parameter.

The Monte Carlo estimate for the gradient of the losstherefore is

This sampled gradient can now be used in Stochastic Gradient Descent to find the value offor which the expected discrepancy in collision angle is minimised.

Our online optimisation method takes a single stochastic gradient descent step at each DSMC timestep – updating the collision model in parallel as the DSMC simulation progresses – during the transient phase of the simulation before averaging begins. At each timestep, the estimator Equation39is sampled for a subset of the particles. We use a sample of size, drawn uniformly from all particles in the domain. For each of these particles, a one-sample estimator of the gradient is used, considering independent collision partners for each term. At timestep, the VHS parameter is updated according to

As in the neural network training, the learning rateis scheduled to decay according to

with,. In this case,is constant instead of chosen adaptively according to RMSProp.

The above estimatorfor the gradient of the expectation over the DSMC step relies on uniform sampling over possible collision partners. An alternative estimator based on the score function approach, with samples drawn from the possible outcomes of the DSMC procedure, is also natural but in fact has a higher variance.

In this case, we rewrite the gradient of the expectation, Equation34, as,

where the collision partneris now distributed according to the probability of undergoing a real collision with. We can then sample a Monte Carlo estimate for this expectation as

by first uniformly sampling a virtual collision partner, with probability, and then accepting or rejecting it as in DSMC. With probability, or if we reject the sample, we have sampled the event “no real collision” and the estimate is zero. The variance of this estimator depends on

The final inequality is because we sample possible pairs uniformly and then have a chance to reject, and so. On the other hand, the variance of the first estimator relying on uniform sampling (Equation35) depends on

therefore, and so,

since both estimators are unbiased and so in particular. In addition to having higher variance, the sampling procedure foris more complex. Therefore, the uniform sampling method is numerically preferable and used in our implementation.

SECTION: 5.2Numerical Results

Figure16displays the convergence of Monte Carlo estimates for the gradient of the single particle expectation (Equation34) with increasing sample size, as well as the empirical standard deviation over twenty repeated calculations for each. As expected, the sampled values converge, and the standard deviation of the estimator decreases at a rate proportional to. We take, which simplifies the implementation and is sufficient for use in stochastic gradient descent.

Figure17shows the progress of training for shocks at, with Mach 5, 9, 30 at a temperature of, and Mach 7.183 at. The results of two training runs are plotted to show that the stochastic gradient descent approaches convergence, and is not simply flattening off due to the decaying learning rate. The plots also show the sampled gradient estimator and its rolling average value. The estimator is very noisy, but nevertheless the stochastic gradient descent converges to an accurate value.

The computational cost of the online VHS DSMC simulation is shown in Table2to belarger than a DSMC simulation with fixed parameters. By comparison, a binary search for the optimalbased on visual comparison requires 5 DSMC simulations in order to reach, as well as a relatively costly CTC-DMS run to generate reference profiles. Figure17shows that when a single stochastic gradient descent step is taken at each DSMC timestep, for most conditions considered, the simulation converges rapidly and most of the training time is spent close to the learned optimal value. It is therefore possible in some cases to reduce the overhead of the online training procedure by training for a smaller number of steps. However, for the cold shock at Mach 7.183, the full length of training is required. We aim here to provide consistent, conservative values of the training hyperparameters which have been observed to perform well in practice, and which in any case result in a relatively small extra computational cost compared to a single DSMC simulation.

The resulting shock profiles are shown in Figure18, comparing the online DSMC, CTC-DMS and VHS DSMC with the reference parameters,,. The shock profiles from the online optimised DSMC are able to reproduce or improve upon the results obtained from the reference values. In particular at higher Mach numbers – where standard VHS DSMC (with the reference value of) exhibits a large discrepancy with the CTC-DMS profiles – the optimised parameter value gives a much closer fit to both density and temperature. The key feature of our approach is that thecan be calibrated online during a DSMC simulation to a relatively small subset of CTC trajectories. Calibration does not require the (computationally costly) full DMS simulation, which may even be computationally infeasible for higher dimensional configurations with more complex geometries.

The optimal values ofare observed to depend on Mach number. The results of DSMC with the reference parameters deviate significantly from DMS at high Mach numbers above Mach 9, due to the higher downstream temperatures, and the online trained VHS model is able to much more closely reproduce both the density and temperature profiles of the CTC-DMS. As noted in[4], the best value of the VHSis observed to increase for colder temperatures.

It is interesting that an objective function incorporating the expected collision angle for a given particle should give accurate results. The collision angle is defined in the centre of mass frame of a particular collision, and therefore would seem not to be meaningful without a specific collision partner having been chosen. However, as pointed out above, for VHS Equation32is related to the expected number of collisions that a particle will undergo during a timestep. The analogous expectation for the CTC collision angle can then be seen as an effective cross section for the Lennard–Jones interaction under the conditions encountered in the flow, and therefore as a natural candidate for calibration of the VHS model.

SECTION: 6Conclusion

This work has developed an online optimisation method for calibrating Direct Molecular Simulation and DSMC collision models during simulations using in situ generation of trajectory data. Our numerical results demonstrate that online-optimised neural network collision models are capable of reproducing shock profiles obtained by DMS and MD at a significantly reduced computational cost. The online-optimised neural network collision model is also more accurate (as compared to DMS) than standard VHS DSMC for higher Mach numbers.

We have also compared offline (the standard approach for existing scientific machine learning models) training to our online training method for calibrating neural network collision models. Training a neural network model offline on trajectory data is adequate if the model is required to run multiple simulations in similar conditions. However, our numerical results show that the offline method is limited by the range and distribution of the training dataset: for prediction cases far from the physical conditions of the training dataset, the offline-trained model becomes less accurate. Therefore, the applicability of offline models to predictions on new physical conditions can be limited by the size of the training dataset. The online-optimised collision models developed in this paper are able to accurately generalise to new prediction cases at low computational cost.

Although this paper has implemented and evaluated the method for 1D shocks, the online-optimisation method could also be easily applied to more complex, higher-dimensional geometries. Implementation of the method for higher-dimensional spatial flows could be the focus of future research. The method could also be extended to flows with active rotational and vibrational degrees of freedom. The collision processes to be learned in this case are more complex, taking into account the internal energies of the colliding molecules. Existing DMS methods would therefore be substantially more computationally expensive than in the monatomic case, suggesting that the online-optimised ML-DMS method could provide significant computational benefits.

We have also developed a method for online-optimisation of DSMC using a new Monte Carlo estimator for the gradient of the expected scattering angle over a single step. We applied this algorithm to calibrate the VHS model parameter for 1D shocks. The online-optimised DSMC shock profile has significantly higher accuracy than standard VHS DSMC as compared to full CTC-DMS, with computational costlower than DMS.

SECTION: Acknowledgements

This publication is based on work supported by the EPSRC Centre for Doctoral Training in Mathematics of Random Systems: Analysis, Modelling and Simulation (EP/S023925/1), and by the U.S. Department of Defense, Office of Naval Research, under Award N00014-22-1-2441. The computations described in this research were performed using the Baskerville Tier 2 HPC service (https://www.baskerville.ac.uk/). Baskerville is funded by the EPSRC and UKRI through the World Class Labs scheme (EP/T022221/1) and the Digital Research Infrastructure programme (EP/W032244/1) and is operated by Advanced Research Computing at the University of Birmingham. We thank Narendra Singh for many helpful discussions on the DMS method and Adam C. Jones for typographical notes.

SECTION: References