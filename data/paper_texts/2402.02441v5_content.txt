SECTION: TopoX: A Suite of Python Packages for Machine Learning on Topological Domains
SECTION: Introduction
Deep learning traditionally operates within Euclidean domains, focusing on structured data like imagesand sequences. However, to handle more diverse data types, geometric deep learninghas emerged. GDL extends deep learning to non-Euclidean data by leveraging geometric regularities like symmetries and invariances. Recently, topological deep learninghas gained attention, exploring models beyond traditional graph-based abstractions to process data with multi-way relations, such as simplicial complexes and hypergraphs. These extensions allow for the representation of diverse data domains encountered in scientific computations. Despite theoretical advancements, practical implementation faces challenges due to the lack of accessible software libraries supporting deep learning models with higher-order structures.

In this paper, we present, an open-source suite of Python packages designed for machine learning and deep learning operations in topological domains.is organized into three Python packages:,, and(see Figure). These packages enhance and generalize functionalities found in popular mainstream graph computations and learning tools, enabling them on topological domains. What setsapart is its abstract general design and the exploitation of the resulting modeling flexibility in the implementation of a broad spectrum of topological domains and TDL models (see Table). Further, every domain inoffers utilities to work with various components such as nodes, edges, and higher-order cells.also supports computations using incidence matrices, (co)adjacency matrices, and up, down, and Hodge Laplacians.
From a representation learning point of view,provides methods for embedding topological domains, or parts of these domains, into Euclidean domains.offers a wide range of TDL models based on a comprehensive implementation of higher-order message passing, built on theframework.

The core objectives ofare to: facilitate topological research through foundational code and algorithm dissemination; broaden access to the field with user-friendly topological learning tools for the ML community; serve as a resource for topological learning enriched with examples, notebooks, and visualizations; and provide a unified API for topological domains. This API supports the generalization of topological spaces across scientific computations, enhancing interoperability, productivity, learning, and collaboration, while reducing maintenance, promoting code portability, and enabling parallel computing.

SECTION: Implementation Overview
Thepackage is organized into three main modules:,, and. Themodule implements numerous common topological domains, such as,, and more; inheriting from the abstract class. Themodule implements spectral methods, distance computation, and connected component analysis in topological domains. Themodule facilitates conversions between different topological domains.usesandbackends, and offers toy datasets and examples to facilitate learning and improve understanding.

Thepackage supports the learning of representations for all topological domains available in. This package contains the module, which implements topological representation learning algorithms that generalize popular graph-based representation learning algorithms, includingand. Thepackage has an API inspired byand utilizes the KarateClubbackend. Whileleverages methods from KarateClub, its functionalities are distinguished by a rigorous foundation in topological representation learning from. This foundation enables unique, theory-driven contributions, extending the package’s capabilities to embed all topological domains inwith a single unifying API, not just graphs as in KarateClub.

is a Python package for topological deep learning, providing efficient tools to implement topological neural networks (TNNs). The package consists of two main modules:and. Themodule implements higher-order message passing methods, allowing the construction of general-purpose TNNs using the tensor diagram formalism introduced inand surveyed in. Themodule implements various TNNs on popular topological domains, such as simplicial complexes, cell complexes, hypergraphs, and combinatorial complexes. Each implementation includes a corresponding Jupyter notebook tutorial for a user-friendly initiation into TDL.leveragesand(PyTorch Geometric) backends. Thepackage is the outcome of the unifying TDL framework introduced inwhich lead to the coding challenge that crowd-sourced the implementations of TDL models.

SECTION: Comparison and Interaction with Other Packages
The libraries most closely related toareand. They facilitate computations on graphs and hypergraphs, respectively.utilizes a similar API to these two libraries to facilitate rapid adoption of topological domains, such as simplicial complexes, cell complexes, and colored hypergraphs. Thepackageoffers hypergraph functionalities similar towith additional support for simplicial complexes and directed hypergraphs.

The closest package tois, which is a Python package consisting of methods for unsupervised learning on graph-structured data.extends the functionality ofto topological domains supported in.and, which are two popular geometric deep learning packages that support deep learning models on graphs, are closely related to. The(Deep HyperGraph) packagesupports deep learning models defined on hypergraphs. All three of our packages feature a continuous integration pipeline and are well-tested with code coverage ofper package. This is comparable or better than many related graph-based learning libraries, such as,,,, and. Tableprovides a comparison betweenand other Python packages.

SECTION: Usage: Elementary Examples
provides a user-friendly interface which allows to create a complex in two main steps: first, instantiate the complex; second, add cells to that complex, as shown in the first three lines of the code snippet below. Furthermore, processing data on a complex requires matrices that describe the (co)adjacency of the incidence relations among cells.

The following code snippet shows howembeds edges of the Stanford bunny dataset using the Cell2Vec algorithm:

The following code snippet shows how to instantiate, and run the forward-pass of an example of simplicial neural networkwith:provides a high-level declarative interface. In, each embedding algorithm is compatible with all complexes available in. In, TNNs are classified according to the topological domain upon which they are defined. In each package, the directories that contain examples and notebooks offer an abundance of code snippets to assist users in starting their journey with.

M. H. acknowledges support from the National Science Foundation, award DMS-2134231. N. M. and M. P. acknowledge support from the National Science Foundation, Award DMS-2134241.
S. E. and R. B. acknowledge support from Spanish project PID2022-136436NB-I00 and ICREA under the ICREA Academia programme. R. B. acknowledges support from an FPU contract FPU21/00968, and by the Departament de Recerca i Universitats de la Generalitat de Catalunya (2021 SGR 00697).
T. B. acknowledges support from the Engineering and Physical Sciences Research Council [grant EP/X011364/1].
T. K. D. acknowledges support from the National Science Foundation, Award CCF 2049010.
N. L. acknowledges support from the Roux Institute and the Harold Alfond Foundation.
T. P. acknowledges support from Zhejiang Normal University (distinguished professorship start-up grant YS304124985).
R. W. acknowledges support from the National Science Foundation, Award DMS-2134178.
P. R. acknowledges support from the National Science Foundation, Award IIS-2316496.
M. T. S. and F.F. acknowledge funding by the Ministry of Culture and Science (MKW) of the German State of North Rhine-Westphalia (NRW Rückkehrprogramm). M.T.S and J. H. acknowledge funding from the European Union (ERC, HIGH-HOPeS, 101039827). Views and opinions expressed are however those of M. T. S. only and do not necessarily reflect those of the European Union or the European Research Council Executive Agency; neither the European Union nor the granting authority can be held responsible for them. The authors acknowledge the ICML Topological Deep Learning challenge that jump-started the development of.

SECTION: References