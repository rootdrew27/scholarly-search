SECTION: Splats in Splats: Embedding Invisible 3D Watermark within Gaussian Splatting

3D Gaussian splatting (3DGS) has demonstrated impressive 3D reconstruction performance with explicit scene representations. Given the widespread application of 3DGS in 3D reconstruction and generation tasks, there is an urgent need to protect the copyright of 3DGS assets. However, existing copyright protection techniques for 3DGS overlook the usability of 3D assets, posing challenges for practical deployment.
Here we describe WaterGS, the first 3DGS watermarking framework that embeds
3D content in 3DGS itself without modifying any attributes of the vanilla 3DGS. To achieve this, we take a deep insight into spherical harmonics (SH) and devise an importance-graded SH coefficient encryption strategy to embed the hidden SH coefficients. Furthermore, we employ a convolutional autoencoder to establish a mapping between the original Gaussian primitives’ opacity and the hidden Gaussian primitives’ opacity. Extensive experiments indicate that WaterGS significantly outperforms existing 3D steganography techniques, with 5.31% higher scene fidelity and 3faster rendering speed, while ensuring security, robustness, and user experience. Codes and data will be released at ourproject page.

SECTION: 1Introduction

Building on the success of utilizing a discrete 3D Gaussian representation for scenes, 3D Gaussian Splatting (3DGS)[18]significantly accelerates the training and rendering speed of radiance fields with explicit scene representations. Given the widespread application of 3DGS in 3D reconstruction and generation tasks[35,36], the identification and attribution of 3DGS assets are crucial to ensure their secure use and protect against copyright infringement. Watermarking can play a key role in verifying the provenance of 3DGS assets and preventing both accidental and deliberate misuse.
In addition to ensuring security, fidelity, and robustness as observed in traditional digital watermarks, the digital watermarking technique for 3DGS also must fulfill the following two criteria:

a) Protecting the 3DGS asset itself rather than the rendered image.A straightforward approach for 3DGS watermarking is embedding specific information directly into the rendered images from the 3DGS. However, this method solely safeguards the copyright of the rendered images from specific viewpoints instead of the copyright of the 3DGS itself. Malicious users may generate new samples employing different rendering strategies after stealing the core model, circumventing the external watermarking anticipated by the creators.

b) Ensuring the usability of 3DGS assets.Watermarking techniques must not disrupt the user’s normal use of 3DGS assets. Digital watermarks for 2D images[2,34], videos[26,24]and Neural Radiance Fields (NeRF)[19,16]have all ensured this aspect. However, existing 3DGS watermarking techniques such as GS-Hider[40]modify the attributes and rendering pipeline of vanilla 3DGS, as shown in Fig.1. These methods have an immense effect on users’ standard utilization since the watermarked 3DGS asset poses challenges for practical deployment in vanilla 3DGS rendering engines and downstream tasks. The fundamental solution is to keep the attributes of vanilla 3DGS.Is there a solution that can embed
watermark in 3DGS itself without modifying any attributes of the vanilla 3DGS?

To fulfill the above demands, we propose an effective and flexible watermarking framework namedWaterGS. To the best of our knowledge, WaterGS is the first framework that embeds 3D content into the vanilla 3DGS while fully preserving its attributes. To achieve this, We take a deep insight into spherical harmonics (SH) and devise an importance-graded SH coefficient encryption/decryption strategy to embed the hidden SH coefficients. Furthermore, we employ a convolutional autoencoder to establish a mapping between the original Gaussian primitives’ opacity and the hidden Gaussian primitives’ opacity. WaterGS can also embed other types of digital content, like images, as specific forms of 3D scenes. Our main contributions are as follows:

We propose WaterGS, the first framework that embeds
3D content in 3DGS itself without modifying any attributes of the vanilla 3DGS.

Building on a deep insight into the Gaussian primitives’ attributes, we devise importance-graded SH coefficient encryption and autoencoder-assisted opacity mapping to preserve the structural integrity of the vanilla 3DGS.

Extensive experiments indicate that WaterGS achieves state-of-the-art fidelity and efficiency while ensuring security, robustness, and user experience.

SECTION: 2Related Works

SECTION: 2.13D Gaussian Splatting

Due to the success of utilizing a discrete 3D Gaussian representation of scenes, 3D Gaussian splatting[18]significantly accelerates the training and rendering speed of radiance fields. This breakthrough immediately attracted countless attention. Recently, many researchers have focused on improving the rendering quality[39], effectiveness[9,8]and the storage[28]of 3DGS, extending it to dynamic 3D scenes[32,21], large-scale outdoor scenes[23], and high-speed scenes[33,38,14], relaxing its restrictions on camera poses[27]and sharp images[6]. 3DGS is also widely used in the area of inverse rendering[13,22,11], 3D generation[35]and 3D editing[7]. Patently, 3DGS is replacing NeRF as the dominant 3D representation and becoming a mainstream 3D asset. Thus, the management of the copyright of 3DGS has been emerging as an urgent problem.

SECTION: 2.2Digital Watermarking and 3D Steganography

Digital watermarking has continuously evolved from traditional information hiding methods based on domain transformations[3,15]to watermark encoder and extractor architectures driven by deep learning[41,1], achieving widespread success in 2D images[2,34], videos[26,24], and large-scale generative models[10,31]. However, 3D steganography techniques place greater emphasis on the unique characteristics of 3D representations. Existing 3D steganography techniques primarily focus on 3D representations like meshes or point clouds, employing domain transformations[20,17]or homomorphic encryption[30]for information hiding. Yooet al.[37]extracted hidden information from 2D images rendered from different perspectives of a 3D representation, thereby achieving copyright protection.

Recently, steganography techniques on implicit 3D representations like NeRF have gained prominence. Liet al.[19]introduced the StegaNeRF framework, embedding secret images into 3D scenes by fine-tuning NeRF’s weights, while preserving the original visual quality. CopyNeRF[25]replaced the original color representation in NeRF with a watermarked version, enabling rendered images to contain specific embedded strings and achieved a high bit accuracy.
WaterRF[16]introduced a watermarking method for both implicit and explicit NeRF representations which embeds binary messages using discrete wavelet transform, combined with deferred back-propagation, achieving great performance in capacity, invisibility, and robustness.
When considering 3DGS, a novel and efficient 3D representation, GS-Hider[40]utilized a scene decoder and a message decoder to disentangle the original scene from the hidden message, allowing for steganography within 3D scenes. However, GS-Hider not only caused a degradation in both rendering speed and visual quality, but also damaged the vanilla 3DGS architecture, resulting in limited effectiveness in practical deployment. So there is an urgent need for 3DGS steganography research that ensures copyright protection while maintaining the efficiency and usability of original 3DGS framework.

SECTION: 3Preliminary

Different from the widely adopted
Neural Radiance Field, 3DGS characterizes Gaussian primitives to represent a 3D scene explicitly. In this representation, every Gaussian primitiveis defined by a full 3D covariance matrixin world space centered at:

The covariance matrixof a 3D Gaussian primitive can be described as a rotation matrixand a scale matrixand independently optimize of both them.

Further, we utilize the method of splatting to project our 3D Gaussian primitives to 2D camera planes for rendering:

Whereis the Jacobian of the affine approximation of the projective transformation andis the viewing transformation.
Following this, the pixel color is obtained by alpha-blendingsequentially layered 2D Gaussian splats from front to back:

Whereis the color of each point andis given by evaluating a 2D Gaussian with covariancemultiplied with a learned per-point opacity.

In summary, each 3D Gaussian primitive is defined by five attributes:. Specifically,andare represented asvectors, whileis formatted as avector, andis a scalar value. Notably,is constituted as amatrix of Spherical Harmonic (SH) coefficients, which effectively compensates for view-dependent effects.

SECTION: 4Methodology

SECTION: 4.1Overview

The overall workflow of the proposed WaterGS is depicted in Fig.2. Our objective is to seamlessly embed a 3D watermark into 3DGS assets through hidden attributes, while ensuring that the typical usage pipeline for regular users remains unaffected. WaterGS can also embed other types of digital content, like images, as specific forms of 3D scenes. Accordingly, the asset owner can leverage a private key to recover the hidden attributes and extract the 3D watermark, enabling robust verification. To achieve this, we first pre-train hidden SH coefficients and opacity for each 3D Gaussian primitive to align with the watermarking scene. Subsequently, we devise importance-graded SH coefficient encryption/decryption and autoencoder-assisted opacity mapping strategies to effectively accomplish watermark embedding and extraction. With these strategies, WaterGS can not only protect the copyright of 3DGS assets but also maintain the essential attributes of vanilla 3DGS, thereby ensuring its practical usability.

SECTION: 4.2An Insight in Spherical Harmonics

Any functionis defined on the spherecan be represented as a set of SH basis functions:

and the basis functions are defined as:

whereare the associated Legendre polynomials andare the normalization constants:

Low values of(called the band index) represent low-frequency
basis functions over the sphere while high values ofrepresent high-frequency
basis functions.
In most cases, higher-frequency reflections occupy only a small proportion of the scene. Consequently, the contribution of higher-order spherical harmonic coefficient is minimal, leading to information redundancy in these higher-order terms, as illustrated in Fig.3.
Embedding watermark information within these terms would pose considerable challenges for detection and would ultimately preserve fidelity. In this paper, we capitalize on this property of spherical harmonics to embed information while simultaneously improving resilience against noise attacks that target spherical harmonics.

SECTION: 4.33D Watermark Embedding

As illustrated in Fig.2, we embed the trained hidden SH coefficients and opacities into the original Gaussian primitives. For the SH coefficient encryption, we prioritize SH coefficients by order, embedding the more significant hidden coefficients into the higher-order components of the original SH through bit shifting. For the opacity mapping, we set a threshold to filter out insignificant hidden opacities and utilize an convolutional autoencoder to learn the mapping from the original opacity to the hidden opacity.

For the original SH coefficientsand the hidden SH coefficients, letdenote the-thcomponent of. Then, the order ofisaccording to the definition, wheredenotes the floor function. The lower the order of, the more significant the coefficient is in the Gaussian primitive. Drawing from the insight from Sec.4.2, we embed more bits of the low-orderinto the higher-orderto achieve higher quality. For computational convenience, we scale these coefficients and represent them in integer form as binary values of.

Firstly, we nullify the lower bits ofbased on its graded importance:

Wheredenotes left bit shifting operation,operator represents the bitwise NOT operation, andrepresents the bit shifting length corresponding to the 0-order coefficient.
Subsequently, we shiftto the corresponding position andperform an exclusive OR operation with:

Wheredenotes right bit shifting operation,represents the maximum bit length, anddenotes the watermarking SH coefficient. Theterm indicates thathas been reversed to match our importance-graded selection. Building on this strategy, we maintain the inherent attributes of original 3DGS, while achieving superior rendering fidelity.

To balance the quality of both the original and hidden scenes, we also incorporate hidden opacity attributes and employ a convolutional autoencoder to learn the mapping from original opacity to hidden opacity. Let the original opacity be denoted asand the hidden opacity attribute as. We first set a thresholdto obtain the indices of the more significant hidden opacity values:

Notably, we store the coordinatesof the Gaussian primitives at the indices, which are then used in the hidden opacity estimation process. Then we denoteandas the values ofandat, respectively.
Based on the observation thatandexhibit complementary relationships at many positions, we apply an autoencoder to, performing encoding and decoding to obtain. We then utilize the Mean Squared Error (MSE) to train the autoencoder, learning the mapping fromto:

Here,andrepresent the encoder and decoder, respectively. To ensure real-time rendering, our autoencoder is composed of several simple convolutional and deconvolutional layers. The trained model parametersthen serve as the private attribute for the owner. Through this strategy, we reduce the storage requirements for the asset owner, while preserving the usability of the watermarked 3DGS.

SECTION: 4.43D Watermark Extraction

In cases of suspected copyright infringement, we can use SH coefficient decryption and opacity estimation to recover the hiddenand:

Whereis the public watermarked coefficient, andandrepresent the encoder and decoder obtained from, respectively. In practical scenarios, we can choose to retain only the recovered low-order SH coefficients to defend against potential noise attacks. For indices outside of the set(i.e., positions from 1 tonot included in), we set the hidden opacity to zero, as these locations are considered less significant. Finally, we use the recovered attributesas the hidden 3DGS, which contains the embedded 3D watermark.

SECTION: 5Experiment

SECTION: 5.1Implementation Details

Our code is based on 3DGS and we train models foriterations on NVIDIA A800 GPU with the same optimizer and hyper-parameters as 3DGS. Unless otherwise specified,andin Eq.10and Eq.8are set to 0.25 and 17.

SECTION: 5.2Experimental Settings

Datasets:Same as GS-Hider[40], we conduct experiments on 9 original scenes taken from the public Mip-NeRF360[4]dataset and the correspondence between the hidden and original scene is also the same as GS-Hider. Please refer to our Appendix for more details.Baselines:we compare our WaterGS with existing
3DGS steganography method GS-Hider[40]. We also use some intuitive approaches with original 3DGS (3DGS+SH and GS+Decoder) as our baselines as[40]did since the available 3DGS watermarking technologies are rare. Meanwhile, we feed the rendering results of the original 3DGS to a U-shaped decoder and constrain it to output hidden scenes according to[19], called 3DGS+StegaNeRF.Metrics:We evaluate the
synthesized novel view in terms of Peak Singal-to-Noise Ratio (PSNR) and Structural Similarity Index Measure (SSIM). Meanwhile, we use rendering FPS to evaluate our efficiency.

SECTION: 5.3Evaluation of WaterGS

Firstly, we compare our WaterGS with baselines in terms of fidelity, efficiency, robustness, security, and usability.a) Fidelity:We use Novel View Synthesis (NVS) results to evaluate scene fidelity. As shown in Tab.1, our WaterGS achieves the best NVS quality on both original and hidden scenes. Fig.4shows more visual details which indicate that our waterGS achieves the most appealing visualization results without the artifacts seen in 3DGS+2SH or the erroneous textures and colors observed in StegaNeRF+GS.b) Efficiency:Tab.1also demonstrates that our WaterGS achieves state-of-the-art rendering efficiency, with a rendering speed of over 100 FPS, which is 3x faster than the existing 3DGS watermarking methods using neural networks, such as GS-Hider.c) Robustness:To evaluate the robustness of 3DGS watermarking method, we degrade the Gaussian primitives using sequential pruning and random pruning methods same as[40]. For sequential pruning, we delete the Gaussian primitives with lower opacity, the results are shown in Tab.2. For random pruning, we delete the random Gaussian primitives, the results are shown in Tab.3. Both sequential pruning and random pruning results demonstrate that our WaterGS not only resists the degradation process effectively but also achieves better robustness compared to GS-Hider.
For 25sequential pruning, our PSNR only decreases by 0.002 while GS-Hider decreases by 0.03. For 25random pruning, our PSNR only decreases by 0.09 while GS-Hider decreases by 1.26.d) Security:To evaluate the security of our WaterGS, we employ StegExpose[5], a technique for detecting hidden information in images, to verify whether the rendered images of 3DGS assets contain detectable embedded data. We apply StegExpose to the rendered images of different methods to perform anti-forensic detection. The detection set is composed of rendered images from the original scene, mixed with ground truth images at an equal ratio. A higher true positive rate (TPR) and a lower false positive rate (FPR) indicate that the rendered image is more detectable, implying lower security for the watermarking method. Fig.8demonstrates that WaterGS exhibits the best security performance among competitive methods, making it highly resistant to detection by StegExpose. For instance, at an FPR of 0.72, WaterGS achieves a TPR of only 0.04, significantly lower than the TPR of 0.16 for both 3DGS+StegaNeRF and 3DGS+SH.e) Usability:Tab.1also demonstrates the adaptability of our WaterGS and baselines to the rendering engine (SIBR Viewer) provided by 3DGS. WaterGS can be directly integrated into the rendering pipeline provided by 3DGS, offering a seamless user experience that existing approaches are unable to achieve.In conclusion, our WaterGS achieves both state-of-the-art rendering efficiency and quality while ensuring excellent security, robustness, and user experience.

SECTION: 5.4Ablation Study

a) Opacity mask threshold:We conduct ablations to investigate the effect of different opacity mask thresholds. We varyin a wide range from 0.0 to 0.3 and plot the average PSNR and SSIM in Fig.8. Results demonstrate that the opacity mask threshold has a significant influence on rendering quality and WaterGS achieve the best performance when opacityis set to 0.25. The visualization results in Fig.5further indicate that our opacity mask significantly reduces artifacts and geometric errors, leading to visually appealing rendering outcomes.b) Bit shifting length:We vary the bit shifting lengthfrom 10 to 22 and plot the average PSNR and SSIM. The results in Fig.8demonstrate thathas minimal impact on rendering results of both original and hidden scene, which further demonstrates the robustness of our method. We provide more comprehensive details in Appendix.

c) Importance-graded SH coefficient encryption:We further conduct ablations to illustrate why importance-graded SH coefficient encryption is necessary. We compare the performance of WaterGS with the average encryption (AVG for short) under different levels of Gaussian noise, with noise levels ranging from 0.0005 to 0.01. Quantitative results in Tab.4demonstrate that importance-graded encryption offers a significant advantage in noise resistance, which enhances both security and robustness. Figure6confirms that as the noise level increases, AVG encryption causes a dramatic degradation in the quality of the recovered hidden scene. In contrast, WaterGS exhibits strong robustness against high-level noise, ensuring successful extraction of the hidden 3D watermark.

SECTION: 5.5Further Applications

Image Embedding:Our WaterGS can also embed images into the original 3D scene. In fact, this represents a degenerate case of embedding 3D scenes. Similar to GS-Hider, we treat the image embedding task as a scene embedding task with only a single viewpoint. The visualization results in Fig.9demonstrate that WaterGS can embed and recover high-quality hidden images from the original scenes with minimal impact on the original scene itself.Downstream tasks:Our method provides an excellent user experience, demonstrated by its compatibility with all 3DGS rendering pipelines and engines, as well as its seamless integration into downstream tasks utilizing 3DGS. Fig.10demonstrates that both original and hidden scenes of our WaterGS can be directly applied to mesh extraction[12]and 3D segmentation[29]with exciting performance. More details are shown in the appendix.

SECTION: 6Conclusion

We propose WaterGS, an effective and flexible watermarking framework for 3D Gaussian splatting. To the best of our knowledge, WaterGS is the first 3DGS watermarking method that ensures security, fidelity, robustness, and rendering efficiency while maintaining usability and scalability. By carefully designed importance-graded SH coefficient encryption and autoencoder-assisted opacity mapping, WaterGS injects 3D watermarks into the original 3D scenes presented by 3DGS while fully preserving the attributes of the vanilla 3DGS. Extensive experiments indicate that WaterGS achieves state-of-the-art rendering efficiency and fidelity while being well-suited for deployment across diverse applications. This paper offers a promising outlook on provenance verification in 3DGS and calls for more effort on user experience and scalability.

SECTION: References