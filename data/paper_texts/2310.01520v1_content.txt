SECTION: Bridging the Gap between Structural and Semantic Similarity in Diverse Planning

Diverse planning is the problem of finding multiple plans for a given problem specification, which is at the core of many real-world applications.
For example, diverse planning is a critical piece for the efficiency of plan recognition systems when dealing with noisy and missing observations. Providing diverse solutions can also benefit situations where constraints are too expensive or impossible to model.
Current diverse planners operate by generating multiple plans and then applying a selection procedure to extract diverse solutions using a similarity metric.
Generally, current similarity metrics only consider the structural properties of the given plans. We argue that this approach is a limitation that sometimes prevents such metrics from capturing why two plans differ.
In this work, we propose two new domain-independent metrics which are able to capture relevant information on the difference between two given plans from a domain-dependent viewpoint. We showcase their utility in various situations where the currently used metrics fail to capture the similarity between plans, failing to capture some structural symmetries.

SECTION: Introduction

Given a set of elements, the maximum diversity problem(Glover, Hersh, and
McMillan,1977)aims to find a subset of those elements that are maximally distanced apart in a metric space using a distance function.
In the context of combinatorial optimisation, sometimes it is not possible to model part of the problem because it is not available during the modelling phase. One could use the maximum diversity problem to obtain different solutions that help to overcome this drawback.
For example, multiple solutions for the cutting stock problem(Haessler and
Sweeney,1991)could provide a cutting procedure where the leftovers have a standard size, which can be potentially used later, thus providing a potentially better solution for a context that was not available during solving time.
Direct applications of the diversity problem are typically found in ensuring ethnic diversity(Bunzel and Au,1987; Kuo, Glover, and
Dhir,1993; McConnell,1988)and generating diverse solutions for optimisation problems(Hebrard et al.,2005; Baste et al.,2022).
Applications that receive noisy or missing observations such as the malware detection(Boddy et al.,2005; Sohrabi, Udrea, and
Riabov,2013), applications that deal with simulation scenarios to provide risk management(Sohrabi et al.,2018)or others that consider planning under pre-specified user preferences(Myers and Lee,1999; Nguyen et al.,2012)either require or benefit from generating multiple solutions.

Current diverse automated planners generally solve the top-planning problem(Riabov, Sohrabi, and
Udrea,2014), a generalisation to optimal cost planning where the aim is to find themost optimal plans for a given planning task. There are two main strategies for solving the top-planning problem. The first uses a plan-forbid loop(Katz et al.,2018; Katz and
Sohrabi,2020; Katz and Sohrabi,2022), using a planner to generate a solution and then reformulates the planning task, forcing the planner to avoid generating the same solution again. It keeps this procedure in a loop until the planner generatessolutions. The second strategy uses symbolic search(Speck, Mattmüller, and
Nebel,2020), which keeps exploring an abstraction of the search space until it finds a goal state. Then, it performs a backward search to generate a solution and continues generating the remainingsolutions.

After generating a fixed set of plans, top-planners perform a post-processing phase to select a diverse subset of the generated plans using a similarity metric. Currently, the available metrics are generally unable to differentiate between certain plan symmetries, such as plans with swapped resources. In addition to that, when a human needs to evaluate plans manually, the efficiency of the process can be hindered by either including or excluding symmetric plans in the selection phase.
By not considering those, both human effort and computational resources are wasted. Current metrics differentiate between two given plans using only the plan structural information(Coman and
Munoz-Avila,2011). We instead propose to use semantic information extracted from the problem specification and the domain transition model.

The contributions of this paper are two novel domain-independent plan similarity metrics. The first metric measures similarity by comparing the plan reductions to partially ordered plans, while the second considers the order in which the two plans achieve the problem subgoals. Various case studies are then used to illustrate the new metrics’ usefulness, showing that some structural symmetries can be captured and, therefore, the metrics better differentiate symmetrical plans.

SECTION: Diversity Metrics

A planning task is a tuple of, whereis set of fluents,denotes a set of actions,represents the initial state andthe goal formula.
Aplanis defined as a sequence of actionssuch that. Letbe a generated set of plans for a given planning problem, andone of its valid plans (i.e.).
Letbe the set of actions for plan.
Letbe a similarity function, which maps plansandto a bounded real number, wheredenotes the two plans are maximally different andindicates the two plans to be identical. Conversely, we define the dissimilarity between plansandas.

One of the first domain-independent approaches to generate diverse plans is proposed bySrivastava et al.(2007), who suggested three distance functions used to select plans that are distanced apart from a given plan.
Those similarity functions compared pairs of plans in terms of which actions are shared between them (), the behaviours or states resulting after executing the actions in the plans (), and the shared causal links, denoting which actions contribute to the goals being achieved ().
For a given plan, a causal link is a structure which links a producer action with a consumer action for a certain proposition. In other words, the producer’s action has this proposition as an effect while the consumer has it as a precondition.
Causal links were initially used in the least commitment planning to find and validate partially-ordered plans(McAllester and
Rosenblitt,1991; Weld,1994).
For any two given plansand, these three similarity measures use the Jaccard measurementwhere.
One more similarity metric is the uniqueness metricRoberts, Howe, and
Ray (2014), defined as

where plans are considered as sets of actions instead. Themetric considers two plans unrelated if any action is presented in one plan but not included in the other. Its aim was to reduce the considered set of plans to those that are not subsumed after removing padded and permuted plans.

To further motivate the need for informative similarity metrics, consider the rover problem(Long and Fox,2003)depicted inFigure1. In this instance, the rover goals are:) sample and communicate the soil,) sample and communicate the rock and finally,) send the image data.
When evaluating plans, a human modeller will need to understand why two plans differ and intuitively use various criteria to do so.
For example, a possible criterion would be to consider in what order the different goals are achieved. That is, the modeller could consider that a plan that achieves the subgoals in the order,,(Figure0(a)) is inherently different from a plan that achieves them in the order,,(Figure0(b)).
Another criterion could be to think abouthowthese subgoals are achieved. Similarly to HTN planning(Erol,1995), high-level actions or behaviours sometimes have to be divided in more than one basic action.
Instead of focusing on the base actions, the redundant dependencies between parts of the plan are removed if total order plans are translated to partial order plans. The resulting partial order plans have then less noise to reason with.
Intuitively speaking, the metrics that should be used to discriminate between plans should use the same information as the human modeller.

Compared toSrivastava et al.(2007), we argue that we can compare two plans concerning the flexibility of each plan (i.e. extracted partial-order plans) in addition to the sequence of subgoals achieved to reach a goal.

SECTION: Flexibility Metric

Our first proposed metric considers any two plans related if they share their extracted partial-ordered plans. Therefore the flexibility similarity metric is computed as the Jaccard measurement between the extracted partial order plans. The Jaccard measurement is selected as previous work(Sohrabi et al.,2016)found that it tends to produce more diverse solutions. We define the flexibility metric as:

whereis the partial order plan extracted from the total order plan.
Much research covers how to extract partial-order plans(Say, Cire, and
Beck,2016; Aghighi and
Bäckström,2017). However, we used a simple approach(Katz et al.,2018)to generate them, as it is computationally suitable for the post-processing phase. To clarify this, assume two plansand, which are valid solutions for the rover problem mentioned inFigure1. Each plan is a set of grounded actions, and each grounded action is mapped to a number and

and

For the action-based similarity metric, the value of

which suggests that the plans are identical. Our suggested metric aims to capture the dependency between those actions,

and

based on those extracted partial-order plans, we can compute the similarity as, thus indicating even thoughandhave the same grounded actions still we can differentiate between them based on the dependency among actions in each plan.

SECTION: Subgoals Ordering Metric

Our second proposed metric extracts the goal predicates from the problem’s specification and considers each predicate as a subgoal, and then the metric aims to compare two plans by comparing in what order and when the sub-tasks in the task are achieved. Since subgoals are effectively landmarks, this metric relates to the landmark-based distance function presented byBryce (2014). However, our metric is computationally cheap compared to the expensive computation for landmarks, as we can infer it directly from the problem specification.
This second metric normalises the hamming distance between the subgoals sequences and the max subgoal sequence as follows:

where, defined inAlgorithm1, is a function that receives a total order plan and returns a string encoding the order in which subgoals are achieved.be a function that computes the hamming distance between the subgoal sequences resulting from thefunction applied to a given pair of plans.
Note that the return value of thefunction preserves the step in which the subgoals are achieved, and therefore thefunction is considering this information. Sinceis expected to return a normalised value between, we normalise the Hamming distance by the maximum string length using thefunction.

Algorithm1starts with getting an encoded character map of the available subgoals in the provided problem instance
(3) and then creates an empty string. It then gets the initial state to simulate the actions in(4-5). Afterwards,simulates each action and checks the successor state to see if it contains an achieved subgoal.
If it achieves one, it appends its encoded letter; otherwise, it appends, which indicates no subgoals achieved (7-14).

To illustrate both the intuition behind this metric and how thefunction works, let us consider the rover problem presented inFigure1. The rover aimed to sample and communicate the soil, rock and image data. Thefunction encodes those subgoals into characters: the communicating soil subgoal is encoded into the letter, the rock subgoal is encoded with the letterand the image data with the letter.

Assume plansandsolve the problem in different subgoals sequences. More concretely,sends the rock data after three actions, followed by five actions to send the soil data and finally sends the image data after two actions. On the other hand,sends the image data after four actions, followed by one action to send the rock data, and finally sends the soil data after five actions.
Based on our encoding characters map,would considerwhilegenerates. Moreover, we want to include information about when those subgoals got achieved. Therefore, to account for the timestepuses the letterto represent states with no subgoals accomplished, returningand. Based on these encoded plans, we can now compute the hamming distance, which will be. Note that this value encodes the difference in subgoal ordering and their positions. The finalvalue would then bewhere10is the number of states (i.e. the maximum encoded string length).

SECTION: Case Studies

This section illustrates the behaviour of the proposed similarity metrics. To showcase our proposed metrics, we have extended theDiverse-scoresoftware111https://github.com/IBM/diversescoreto include our suggested metrics222https://github.com/MFaisalZaki/PAIR2023-Semantic-Similarity-Metrics. We used SYM-K(Speck, Mattmüller, and
Nebel,2020)to generate all optimal plans for a series of well-known domains. Afterwards, we selected two plans that show the strengths and weakness of the suggested metrics when compared to the following currently available metrics: stability (), states (), and uniqueness ().
We will not usein our comparisons, as previous research(Srivastava et al.,2007)concluded thatproduced more diverse plans compared toand. However, we will useandin our comparisons, aswas considered the best metric in(Srivastava et al.,2007)and as, uses the information of what actions appear in the plan., similarly to, considers the state trajectories of the plan. To examine the computational time consumed by our similarity metrics, we have added in each table the execution time in seconds when computing the scores for those plans.

SECTION: Depots Planning Problem

The Depot domain was introduced in the third IPC and combined two well-known problems: BlocksWorld and Logistics.
The possible actions are to stack and unstack crates using hoists and to move these crates between different locations using trucks. It is characterised by having significant goal interaction.

We used instance#2 from the IPC-2002 as a case study.Figure2shows two plans to solve the instance that we consider symmetrical, as one plan usedtruck0to solve the planning task while the second usedtruck1.Table1shows the values of the computed metrics between these two plans. Unlike,was able to capture the plan symmetry. Note thatcould unintendedly capture the similarity to some extent if the number of state variables related to the trucks were a small enough set when compared to the whole set of state variables. Sinceanduse grounded actions to compare similarity, they clearly did not capture symmetrical information.

Figure3shows two plans which are almost identical in structure except for the order in which the subgoals are accomplished. We will consider those plans to be dissimilar, as even if both plans accomplish the goal if one were to visualise the execution of both plans in parallel, one would intuitively consider them sufficiently different.
More concretely, the subgoals are achieved by thedropactions inFigure3, marked in bold.

Table2lists the similarity score of each metric for those two plans. Notice thatwas able to differentiate between those two plans, unlike, which considers them identical plans. This is due toconsidering the goal specification, which is not the case in all other similarity metrics.

SECTION: Satellite Planning Problem

The satellite domainLong and Fox (2003)involves scheduling and coordinating multiple satellites to perform various observation tasks. Each satellite may have different capabilities, such as sensors with different resolutions or ranges. Besides, there may also be implicit constraints on which tasks can be performed by each satellite.
If we do not consider unnecessary actions or cycles in the plan, the only possible variation in this problem is the order in which the different actions need to be executed.Figure4shows two different plans, where one plan starts with taking an image forphenomenon6followed bystar5. The second plan takes an image forstar5followed byphenomenon6in this order. Note inFigure4that those two plans share the same structure and order except for the swapped phenomena/star.

Similar toTable2,Table3presents the similarity scores for the satellite plans. Plans presented inFigure4are similar in some sense according to human intuition, and,anddid an excellent job in detecting the similarity between them.
The similarity betweenandwas higher compared to. Due to thefocus on subgoals only and disregards the structure, whereasutilises state variables to compare plans that consist of subgoals treated as fluents and not given higher influence on the plan. Unfortunately,andfailed to compete with the other metrics; it seems that capturing the dependency between actions or searching for unique actions only will not be sufficient to differentiate between plans.

SECTION: Zenotravel Planning Problem

In this transportation domain, people are moved around in aircraft. The key part of the domain is that when zooming, more fuel is consumed than when using a regular speed when flying.Figure5shows two plans, where therefuelaction is executed either at the beginning (Line 1 in the former) or at the end of the plan (Line 5 in the latter).

Table4shows the similarity scores computed for those plans. This confirms the same findings in the satellite case study except on a smaller plan length with different grounded actions and similar execution on a human-level intuition. The only noticeable difference between those two plans is when a planrefuelthe plane, such a difference had no noticeable effect except for the sequence of visiting the cities. Suchlike situations show the need to improve theby accounting for landmarks.

SECTION: Discussion and Future Work

The primary contribution behind this paper is extending(Srivastava et al.,2007)’s perspective to compare two plans together by presenting two similarity metrics that better approximate a domain’s modeller intuition.
The currently used metrics consider the similarity between any two plans by measuring the number of shared grounded actions between them. In the depot’s case study, we highlighted a subjective question of whether symmetrical plans should be considered identical. We argue that two plans doing the same thing in the same order but using different resources are identical, while on a plan structural level, those plans are different. Since some domains could contain various symmetrical plans, the submitted metrics must account for this and try to distinguish between two plans on a higher logic level. Therefore,tried to reason about the common dependencies between actions by converting a total order plan into a partially ordered one and then comparing those sets of partial plans. Unfortunately,did not perform as expected, and such a degraded performance could have been influenced by multiple factors, such as the algorithms used for extracting partial order plans, the plan length and the domain nature that could allow parallel plan execution to some extent. On the contrary,showed a high potential when comparing symmetrical plans sincecompares how and when two given plans achieve their goals by checking the order of the subgoals predicate extracted from the problem specification.

The other case studies, satellite and zenotravel, showed the detailscould capture between any two plans. Thus, we believe it could arguably match the domain modeller’s intuition when comparing plans. Such an ability is highlighted in zenotravel, where the provided plans showed an almost identical sequence of execution but differed in one action. For the current similarity metrics,andare inferring their information from the plan’s structure which was unsuccessful in capturing the similarity between those plans, unlike theandwhich inferred their conclusions from state variables. Considering and comparing state variables can capture relevant information when checking for similarity, and in addition considering subgoals sequences makes the metric more resilient to symmetry.

The presented metrics can now be integrated into diverse planning and plan recognition-related applications. Still, many further improvements can be made to the presented similarity metrics. One possible improvement foris considering landmarks in addition to the subgoal predicates.
Another improvement related to the domain modeller’s intuition is considering aggregating multiple similarity metrics together, such as assemblingwith, which holds the information of having a plan that solves the planning problem in a different sequence with different grounded actions.

SECTION: References