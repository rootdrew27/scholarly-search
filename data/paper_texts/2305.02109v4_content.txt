SECTION: Synergies Between Federated Learning and O-RAN: Towards an Elastic Architecturefor Multiple Distributed Machine Learning Services
Federated learning (FL) is a popular distributed machine learning (ML) technique. However, implementation of FL over 5G-and-beyond wireless networks faces key challenges caused by (i) dynamics of the wireless network conditions and (ii) the coexistence of multiple FL-services in the system, which are not jointly considered in prior works.
We first take a closer look into these challenges and unveil nuanced phenomena calledand. We then take the first steps towards addressing these phenomena by proposing a novel distributed ML architecture called().unleashes the full potential of Open RAN (O-RAN) systems and introduces an elastic resource provisioning methodology to execute FL-services. It further constitutes a multi-time-scale FL management system that introduces three dedicated
network control functionalities tailored for FL-services, including, which trains ML-based applications to predicted both system and FL-related dynamics and parameters;, which handles O-RAN slicing and mobility management for the seamless execution of FL-services;, which conducts real-time resource allocation to the end clients of various FL-services.
We finally prototypeto demonstrate its potential in improving the performance of FL-services.

SECTION: 
Federated learning (FL) has attracted tremendous attention for executing data-intensive Internet-of-Things applications (e.g., autonomous driving), where data is distributedly collected at edge devices. This distributed machine learning (ML) approach is an alternative to centralized ML methods that require transferring distributed data to cloud servers, which often cause a high communication overhead and concerns regarding the exposure of raw data to untrusted parties. FL performs ML training through the repetition of multiple global training rounds, with each round consisting of two key steps: (i) using their local data, clients/devices performtraining, e.g., via several local iterations of stochastic gradient decent (SGD), and transfer their local models to a server, and (ii) the server aggregates all the received models (e.g., via averaging) to aand then broadcasts it back to the clients to initiate the next global training round.

SECTION: 
Despite its tremendous potential, FL is anticipated to be deployed on resource-constrained wireless devices such as smartphones and IoT sensors, which is challenging due to the increasing size of modern ML models that demand substantial computational power for local model training and incur high communication overheads during the transfer from devices to the central server.
To this end, research – seeand the references therein – has focused on (i) tuning the number of local SGD iterations and frequency/period of client-to-server communications; (ii) model compression, gradient sparsification, or selective parameter sharing; (iii) efficient client selection/recruitment. Despite the significance of these methods, there are two key underlying assumptions made in all of them, limiting their applicability in real-world scenarios:

These methods often assume that network and client conditions, such as client location and client-to-server channels, remain fixed during each global training round of FL, and thus they conductof the network. Afterwards, in each snapshot – often presumed to be the condition of the network at the beginning of each global training round – they make control decisions (e.g., spectrum allocation and client recruitment). However, in real-world scenarios, such analysis may quickly become sub-optimal, as the network condition may vary over time due to factors like client mobility and evolving user datasets.

The existing methods primarily focus on executing a single FL-service. However, in large-scale networks, multiple FL-services may simultaneously compete for wireless resources and client recruitment (e.g., Google may run an FL-service for next-word prediction, while Apple does so for face recognition). Despite its importance, only a few studies have explored this topic, all of which consider snapshot-based analysis suffering from the above limitations.
The coexistence of multiple FL-services further introduces a new dimension of heterogeneity, which we call. This heterogeneity reflects theof FL-services in recruiting clients with different (i) datasets, (ii) data quality, (iii) channel conditions, and (iv) processing capabilities. These preferences are shaped by quality-of-service (QoS) requirements of each FL-service (e.g., target model accuracy and latency sensitivity) and its budget to recruit clients and acquire wireless resources.

The simultaneous relaxation of the above assumptions (A1)&(A2) unveils a new paradigm in whichintersects with, introducing the following two non-trivial challenges:

The relaxation of (A1) introduces critical design considerations focused on the over-/under-provisioning of resources (e.g., wireless spectrum), stemming from two phenomena: (i)This issue is caused by client mobility and time-varying channels. For example, a client experiencing poor channel conditions at the start of a global round might initially be allocated high bandwidth to offset its weaker connection. However, as the client moves to a position with a better channel, the previously allocated high bandwidth may end up being underutilized; (ii)This reflects a situation where FL-services lack complete information about each other’s objectives, strategies, and the congestion of clients at different areas. This incompleteness often stems from network access restrictions, where FL-services are not granted access to view network information, such as bandwidth availability and client conditions. In this situation, due to selfishness of FL-service owners, they may make greedy decisions and occupying shared resources (e.g., spectrum), which can lead to over-provisioning of resources for some FL-services while inadvertently cause under-provisioning for others.

Load balancing refers to distributing the network traffic, preventing congestion across the network.
The coexistence of multiple FL-services (relaxation of (A2)) calls for a unique load balancing strategy that considers a nuanced phenomenon which we call. This phenomenon captures the fact that the distribution of FL clients across different network regions varies depending on the perspective from which clients are evaluated/perceived. For example,
regions with advanced connectivity infrastructure, such as urban areas, may have a higher density of clients suitable for latency-sensitive FL-services.
Given the perspective-driven client distribution, in FL, load balancing must account for the overlap of the FL-services’ objectives. For instance, consider two FL-services that need clients from similar regions of the network (e.g., pedestrian detection and line tracking FL-services both executed over smart cars in an urban area). This situation leads to an accumulation of FL-services in that region, causing network traffic congestion.

SECTION: 
Simultaneous addressing of the above two challenges calls for client mobility management (i.e., handover design for load balancing) and dynamic resource allocation solutions, which are the keyof radio access networks (RANs).
However, the existing network control functionalities are often developed for native wireless services (e.g., high data-rate Internet provisioning) and primarily focus on, including energy consumption and communication latency.
Instead, in FL, addressing the aforementioned two challenges should considerAdditionally, effective load balancing in FL must ensure an optimal allocation of, while considering the innate differences among FL-services. For example, consider an FL-service for monitoring industrial equipments utilized during business hours coexisting with an FL-service focused on air quality monitoring. Equipment monitoring might require rapid ML model training to predict failures, while environmental sensing may tolerate longer ML training delays. In this case, the dynamic network control functionalities should prioritize allocating network resources to industrial equipment monitoring during business hours and then shift resources towards environmental sensing.

These considerations necessitate a revamp of the existing network control functionalities to facilitate the coexistence of multiple FL-services within a dynamic network – an approach absent in the literature. This naturally calls for a migration from
traditional RANs (e.g., distributed RANs in 4G), operating with black-box network control functionalities applied to all network services.

SECTION: 
5G-and-beyond networks are expected to support diverse services, including ultra-reliable low latency communications and massive machine-type communications. They also are envisioned to provide services for various– groups of companies requiring similar services (e.g., industrial factories) – operated by distinct.
This versatile service provisioning is enabled by the use ofO-RANs. O-RAN (Fig.) transitions from rigid cellular to multi-vendor and data-driven networks by integrating the concepts of intelligence, virtualization (RAN slicing), and programmablehardware (as opposed to thehardware). In O-RAN, 3GPP stack functionalities are disaggregated into (i) radio unit (O-RU), (ii) distributed unit (O-DU), and (iii) centralized unit (O-CU).

O-RAN introduces RAN intelligent controllers (RICs), i.e., non-real-time (non-RT) RIC and near-RT RICs, which utilize AI/ML algorithms to manage RAN operations at different time-scales. It further supports multiple services with diverse QoS requirements via RAN slicing, which partitions RAN resources into isolated RAN slices, each leased to a virtual network operator.
Unlike traditional RANs, O-RAN fosters dedicated functionalities for each type of service, a feature referred to as. For example, in contrast to the black-box MAC scheduler used in 4G that serves all services uniformly, O-RAN enables the implementation of a dedicated MAC scheduler for each service.

In this work, we aim to introduce FL-services as a newin 5G-and-beyond networks. Specifically, we exploit O-RAN’s unique features, i.e., virtualization, RAN slicing, and programmability and develop a novel intelligent FL architecture, called. In, we introduce dedicated network control functionalities to orchestrate multiple FL-services over a shared dynamic wireless network.

SECTION: 
Our major contributions are as follows:

We identify unique challenges arising from the coexistence of multiple FL-services in dynamic environments. To address them, while considering the service-level objectives of FL-services,
we proposeover O-RAN.

In, we leverage thefeatures of O-RAN to implement dedicated dynamic network control functionalities for FL-services across three time scales – non-RT, near-RT, and RT (relaxation of (A1)).

At the non-RT level, we develop functionalities inthat do not require immediate responsiveness, including client and FL-service registration, and training AI-based application, which we call estimator applications (eApps). eApps are utilized to predict FL-related factors, e.g., perspective-driven client distribution across O-RUs.

At the near-RT level, we developfor FL-services in, facilitating the seamless execution of multiple FL-services (relaxation of (A2)).also introduces a dedicatedand ato handle resource over-/under-provisioning and perspective-driven load balancing.

At the RT level, we introduce dedicated FL MAC scheduler into dynamically allocate resources to clients considering service-level objectives of FL-services.

SECTION: 
In the following, we introduce theframework, which will be implemented over O-RAN.

SECTION: 
To integratein O-RAN, we first focus on intelligent network control in O-RAN. O-RAN supports intelligent control across three levels of agility: (i)operates on a timescale of seconds to minutes, establishing network management policies and hosting applications, known as rApps, which handle long-term functionalities like training AI models for network management. These trained AI models will be packaged into applications, referred to by xApps, and deployed on near-RT RIC. (ii), operating on timescales of 10 milliseconds to seconds, leverages xApps to forecast traffic flow and network dynamics. Using these forecasts, near-RT RIC manages load balancing, network slicing, and mobility management.
(iii) Finally, the, located at the O-DUs, operates in sub-10-millisecond intervals, focusing on real-time resource allocation to the end users.

exploits O-RAN programmability and
envisions dedicated functionalities at each of the aforementioned control layers to manage the concurrent execution of multiple FL-services in a dynamic wireless environment (see Fig.).
We refer to these functionalities as:, located at the non-RT RIC;, deployed at the near-RT RIC; (iii), deployed at the O-DUs. We next design these functionalities to consider the collective service-level performance requirements, such as FL model accuracy across all FL-services.

SECTION: 
To monitor the status of clients and FL-services, we equipwith, deployed at the O-RAN non-RT RIC. This component handles long-term operations (ranging from seconds to minutes) such as client and FL-service registration, along with training AI-based applications for network control. Specifically, this unit stores and regularly updates two descriptors: (i)and (ii).
The client descriptor contains information about each client such as dataset type/size. The FL-service descriptor consists of key QoS requirements such as maximum delay for ML training and model acquisition, target model accuracy, and budget for client recruitment and wireless resource acquisition. Using the information these descriptors provide, the non-RT system descriptor trains AI-based control applications, which we call estimator applications (eApps).

eApps can be construed as a special case of rApps, where due to their unique features, we have opted for a new name. The key difference between eApps and conventional rApps is their focus on.
For example, client congestion in FL extends beyond simple network traffic volume; it also encompasses unique FL characteristics, including recruitment costs and dataset types (e.g., congestion of clients suitable for an object detection FL-service vs a product recommendation FL-service may differ across O-RUs). Subsequently, using eApps,becomes capable of
satisfying the service-level requirements of FL-services – a nuanced capability absent from existing FL methodologies. In particular, in, eApps are utilized to predict/estimate various system factors, including perspective-driven client distribution at O-RUs and fluctuations in the descriptors of clients and FL-services.
These estimates enableto dynamically shift the resources between FL-services based on their real-time demands for clients and wireless resources.

SECTION: 
To manage over-/under-provisioning of wireless resources and provide an environment for seamless execution of multiple FL-services, we equipwith. A near-RT FL controller, operating on a timescale from 10 milliseconds to seconds, periodically downloads eApps to predict the future, e.g., client congestion at O-RUs. Using these predictions, near-RT FL controller then performs functionalities that require faster response times than those handled by the non-RT system descriptor. These functionalities include,, and, explained below.

enables the coexistence of multiple FL-services by creating a virtual RAN slice for each FL-service.
In particular, using eApps, the near-RT FL controller first predicts the FL system states (e.g., client congestion at O-RUs). These predictions are derived from both current and historical data provided by the non-RT system descriptor. Based on these predictions, the near-RT FL controller then sends afor each FL-service to the near-RT RIC, which is responsible for RAN slicing. This request specifies (i) the required resources, such as bandwidth/spectrum, and (ii) the QoS requirements for each FL-service, including delay constraints and priority for accessing O-RAN resources. The slice is then provisioned with the necessary wireless resources (e.g., spectrum) and sent to O-DUs where FL MAC schedulers perform real-time resource allocation for the clients of each FL-service.

For example, consider a time-sensitive FL-service (e.g., traffic prediction) with strict delay constraints for receiving local models from its clients.
Additionally, presume that the datasets across the clients in this FL-service are highly heterogeneous.
This dataset heterogeneity leads to a higher demand for timely reception of the local models of large number of clients at the model aggregations of FL as missing clients’ local models may prevent the global model from being exposed to certain client data, severely affecting its prediction performance.
In this scenario, the near-RT FL controller increates a dedicated RAN slice, with high-priority access to O-RAN resources, for this FL-service to ensure successful transmission of the local models of its clients.

To address resource over/under-provisioning, the near-RT FL controller performs elastic slice scaling down/up. This operation dynamically adjusts the wireless resources (e.g., spectrum) provisioned to slices based on the client congestion and resource demands of FL-services estimated by eApps. For example, if a high-priority, time-sensitive FL-service (e.g., traffic prediction) arrives with significant resource demands predicted by eApps, the near-RT FL controller may scale down an existing slice (i.e., reallocating its resources) to ensure that this FL-service receives enough resources to meet its QoS requirements.

The near-RT FL controller periodically estimates the service-level resource requirements of each FL-service and assesses wireless channel quality – such as data rates – between clients and O-RUs using eApps. Based on these estimates, the near-RT FL controller alters the client to O-RU connections (i.e., conducts handovers).
For example, assume that some clients of a time-sensitive FL-service (e.g., traffic prediction) move into the coverage area of an O-RU with better channel conditions than their current O-RUs. To maintain low-latency model transmission for these clients, the near-RT FL controller may prioritize the time-sensitive FL-service by shifting the connections of these clients to the target O-RU with stronger channel conditions. At the target O-RU, this operation may require reallocating resources from the clients of other FL-services with lower time-sensitivity (e.g., decreasing their allocated bandwidth) to accommodate the clients of the higher-priority service.

SECTION: 
introduces a new dimension to MAC schedulers, enabling client-level, real-time resource allocation for FL clients. This addresses resource over/under-provisioning at a shorter time-scale compared to near-RT FL controller, tailored to service-level performance metrics of FL-services, such as delay constraints for receiving local models from clients. Specifically, for each RAN slice, we equipwith alocated at O-DUs to allocate wireless resources to its clients.

Resource allocation by the FL MAC scheduler is different from resource provisioning by the near-RT FL controller, as the FL MAC scheduler managesresource allocation (e.g., spectrum allocation to each client), responding to the real-time demands of individual clients. Conversely, the near-RT FL controller focuses onresource provisioning (e.g., spectrum allocation to each slice), considering the broader resource needs of each FL-service, which typically change slower than rapid variations in client-level resource demands (e.g., their needed bandwidth which exhibits a high temporal variation caused by the channel fluctuations).

SECTION: 
Fig.illustrates the integration of our proposedinto O-RAN. At the top, the characteristics of differentcomponents are highlighted, along with their differences from conventional O-RAN functionalities. At the bottom, the figure depicts howcomponents interact.

SECTION: 
For prototyping, we consider the dense urban O-RAN scenario in. We assumeO-RUs providing coverage across a hexagonal grid, with each O-RU having 1500 KHz of available bandwidth to allocate to FL clients. O-RAN environment, including signal forms, interference, channels, and data-rates are all modeled according to, whereclients are distributed randomly across O-RUs, moving according to Lévy walk.

We consider two FL-services, each recruiting 16 clients, which utilize a convolutional neural network (CNN) to train on the MNIST (FL-service 1) and Fashion-MNIST (FL-service 2) datasets. In FL-service 1, data points are distributed based on Dirichlet distributionwith parameter. For FL-service 2, we use Dirichlet distribution with, making clients’ datasets highly heterogeneous. Here, the parametercontrols the degree of data heterogeneity, with lower values creating greater heterogeneity.
Each FL-service runs for 10 global training rounds. In each round, clients receive the global model and perform 30 local SGD iterations on their local data. Clients then send their trained local models back to the server, where global model aggregation is carried out using the FedAvg method. We assume that FL-service 1 has a delay constraint ofseconds to receive local models from its clients, while FL-service 2 has a stricter delay constraint ofseconds. Clients who fail to completely transfer their local models to their assigned O-RUs within the designated time window are considered.

SECTION: 
We implement the core components offollowing the outlined methodology in Fig.as follows.

To prototype this component, we first focus on arrows numbered 1 and 2 at the bottom of Fig.and implement features for storing client descriptor (containing clients’ locations and dataset types) and FL-service descriptors (containing delay constraints for receiving local models). Considering the arrow numbered 3 in Fig., we develop an eApp for mobility pattern prediction.
To train the eApp, we run a simulation in whichbegins with an untrained mobility prediction model (a deep neural network with 4 layers). The non-RT system descriptor periodically – every 10 seconds – collects the clients’ locations as they move, storing these positions in the clients’ descriptors. This historical movement data is used to train the eApp, which uses past clients’ positions to predict their future locations. The loss function of the neural network is defined as the mean squared error between the predicted and actual positions. Fig.shows the convergence of the loss function and the actual vs predicted trajectory of a client. Following the arrow numbered 4 in Fig., the client recruitment for each FL-service is conducted based on the dataset type of each client (16 clients with MNIST dataset are assigned to FL-service 1 and 16 clients with Fashion MNIST dataset are assigned to FL-service 2).
Referring to Fig., following the arrow number 5, the trained eApp is then used as a component in the near-RT FL controller to predict the system state, based on which network control managements are performed as follows.

Referring to Fig., following the arrow number 5, we implement functionalities of near-RT FL controller for slice creation, elastic slice scaling, and mobility management jointly as an optimization problem. We define the operational time window for the near-RT FL controller as: every 3 seconds, near-RT FL controller solves the optimization problem to adjustresources provisioning (scale down/up) for each slice.

This optimization problem aims to determine the optimal RAN slice configuration for FL-services at each O-RU. Specifically, the near-RT FL controller leverages the eApp to predict client locations over the next 3 seconds, based on which it estimates the perspective-driven distribution of clients in terms of dataset types. It then estimates the data rate between clients and O-RUs. We calculate the data rates similar toas a function of the distance between clients and O-RUs.
The objective function of this optimization is
the minimization of, which is a weighted sum of the total latency of model transmission from the clients of FL-service 1 () and those of FL-service 2 () per each O-RU.
Motivated by a stricter latency requirement of FL-service 2, we form this weighted sum by coefficientsand. This optimization obtains the optimal client to O-RU assignment and split of bandwidth of each OR-U among the two FL-services.

Near-RT FL controller then creates a slice creation request for each FL-service, including the required bandwidth obtained above. It then sends the request to O-RAN near-RT RIC to create a RAN slice at each O-RU for each FL-service. Near-RT controller solves the above optimization every 3 seconds to perform slice scaling down/up (i.e., adjusting the bandwidth) and handover operations.

Referring to Fig., following the arrow number 6, we design FL MAC schedulers fed with the information from the near-RT FL controller.
Since the MAC scheduler operates in real-time (within a 10-millisecond interval), we develop a lightweight FL MAC scheduler for each slice. These schedulers use eApps to predict client locations over the next 10 milliseconds. Based on this prediction, they calculate the channel gains between clients and their connected O-RU. To decrease the number of unsuccessful clients of FL-services (which is a service-level performance metric), the FL MAC schedulers
first sort the clients based on their channel gains, and then allocate enough bandwidth to each client (starting from the client with the highest channel gain) to satisfy the FL-services delay constraints.

SECTION: 
We comparewith the following baseline methods.

This baseline reflects traditional FL methods and conducts snapshot-based analysis of the system with ignoring the unique characteristics of O-RAN. It solves a similar optimization problem to the one described in near-RT FL controller above but – since O-RAN functionalities are not considered – this problem obtains client-level bandwidth allocation and is solved at the beginning of each global round.

This baseline represents existing network control functionalities used for native wireless services by solving an optimization problem, the objective of which is. This baseline does not incorporate service-level objectives or constraints of FL-services.

To solve all the optimizations above, we apply techniques in our previous works, which involve transforming the optimization problems into convex forms and solving them using CVXPY. Below, we discuss the simulation results.

SECTION: 
The left diagrams of both top and bottom plots in Fig.show that Baseline 1 diminishes the model accuracy (around) for FL-service 2. This occurs because Baseline 1 allocates resources at the start of each global round. As a result, the initially optimal resource allocation becomes suboptimal due to changes in the network caused by client movement, leading to over- or under-provisioning of resources. This, in turn, can cause delays in model transmission, preventing some clients from successfully sending their local models to O-RUs – 8 and 7 unsuccessful clients for FL-service 1 and FL-service 2, respectively. Due to the severe dataset heterogeneity of the clients in FL-service 2, this results in a greater drop in accuracy for this service.

As shown in the middle diagrams of the top and bottom plots in Fig., Baseline 2 results in failure of the majority of clients. This is because, Baseline 2 focuses on maximizing each client’s data rate (a per-client performance metric), rather than maximizing the number of successful clients for FL-services (which is a service-level performance metric). This highlights how MAC-layer resource allocation and mobility management designed for native wireless services fall short in addressing the unique demands of FL-services.

As illustrated in the right plots of the top and bottom diagrams in Fig.,outperforms both baselines. Our approach improves model accuracy of both FL-services (for FL-service 1 andfor FL-service 2) as more clients can transmit their local models to the O-RUs.

To further highlight the importance of service-level performance requirements, Fig.presents an ablation study showing how the weight/importance assigned to FL-service 2 (i.e.,in the objective function) affects the overall performance of both FL-services. It can be seen that an increase in the importance of FL-service 2 increases its number of successful clients – since the network resources (i.e., bandwidth) will be given to FL-service 2 with a higher priority – while decreasing the number of successful clients of FL-service 1.

SECTION: 
We proposed, an innovative FL architecture over O-RAN, orchestrating the concurrent execution of multiple FL-services in a dynamic wireless network. In, we introduced three layers of dedicated network control functionalities for FL-services: the non-RT system descriptor, near-RT FL controller, and FL MAC scheduler.
Additionally, we implemented a prototype ofand demonstrated the notable performance gains it can obtain compared to the baselines methods.

The introduction ofopens the door to various future innovations, including creating optimized slice elasticity units that balance client energy usage, O-RAN operational costs, and the efficiency of FL-service model training. Also, addressing adversarial behaviors — such as FL-services misrepresenting their resource requirements — is crucial, as these can negatively impact overall system performance. Further, considering direct device-to-device communications between the clients opens up a new research avenue on designing optimal RICs and MAC schedulers considering ML model relaying between the clients.

SECTION: References